2020-12-07 09:17:35,044 maskrcnn_benchmark INFO: Using 1 GPUs
2020-12-07 09:17:35,045 maskrcnn_benchmark INFO: Namespace(config_file='d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml', custom_dict='custom_dict.txt', distributed=False, local_rank=0, opts=[], skip_test=False, weights='visdrone_model_0360000.pth')
2020-12-07 09:17:35,045 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2020-12-07 09:17:42,271 maskrcnn_benchmark INFO: 
PyTorch version: 1.1.0
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: Ubuntu 16.04.7 LTS
GCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
CMake version: version 3.5.1

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: GPU 0: GeForce GTX 950M
Nvidia driver version: 450.80.02
cuDNN version: /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.4

Versions of relevant libraries:
[pip3] numpy==1.19.4
[pip3] torch==1.1.0
[pip3] torchvision==0.3.0
[conda] blas                      1.0                         mkl  
[conda] mkl                       2020.2                      256  
[conda] mkl-service               2.3.0            py36he904b0f_0  
[conda] mkl_fft                   1.2.0            py36h23d657b_0  
[conda] mkl_random                1.1.1            py36h0573a6f_0  
[conda] pytorch                   1.1.0           py3.6_cuda9.0.176_cudnn7.5.1_0    pytorch
[conda] pytorch-nightly           1.0.0.dev20190328 py3.6_cuda9.0.176_cudnn7.4.2_0    pytorch
[conda] torchvision               0.3.0           py36_cu9.0.176_1    pytorch
        Pillow (8.0.1)
2020-12-07 09:17:42,271 maskrcnn_benchmark INFO: Loaded configuration file d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml
2020-12-07 09:17:42,272 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "e2e_faster_rcnn_X_101_32x8d_FPN_1x.pth"
  BACKBONE:
    CONV_BODY: "R-101-FPN"
    FREEZE_CONV_BODY_AT: 5
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 1000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    STRIDE_IN_1X1: False
    NUM_GROUPS: 32
    WIDTH_PER_GROUP: 8
DATASETS:
  TRAIN: ("giro1_train","giro4_train","giro5_train" )
  TEST: ("giro1_test","giro4_test","giro5_test")
DATALOADER:
  SIZE_DIVISIBILITY: 32
  NUM_WORKERS: 0
SOLVER:
  BASE_LR: 0.00000002
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000,)
  MAX_ITER: 1500
  IMS_PER_BATCH: 2
TEST:
  IMS_PER_BATCH: 1

2020-12-07 09:17:42,276 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('giro1_test', 'giro4_test', 'giro5_test')
  TRAIN: ('giro1_train', 'giro4_train', 'giro5_train')
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-101-FPN
    FREEZE_CONV_BODY_AT: 5
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FBNET:
    ARCH: default
    ARCH_DEF: 
    BN_TYPE: bn
    DET_HEAD_BLOCKS: []
    DET_HEAD_LAST_SCALE: 1.0
    DET_HEAD_STRIDE: 0
    DW_CONV_SKIP_BN: True
    DW_CONV_SKIP_RELU: True
    KPTS_HEAD_BLOCKS: []
    KPTS_HEAD_LAST_SCALE: 0.0
    KPTS_HEAD_STRIDE: 0
    MASK_HEAD_BLOCKS: []
    MASK_HEAD_LAST_SCALE: 0.0
    MASK_HEAD_STRIDE: 0
    RPN_BN_TYPE: 
    RPN_HEAD_BLOCKS: 0
    SCALE_FACTOR: 1.0
    WIDTH_DIVISOR: 1
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: False
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    NUM_GROUPS: 32
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: False
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 8
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: ResNet50Conv5ROIFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 1000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: visdrone_model_0360000.pth
OUTPUT_DIR: .
PATHS_CATALOG: /zold137/maskrcnn_benchmark/config/paths_catalog.py
SOLVER:
  BASE_LR: 2e-08
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  MAX_ITER: 1500
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 1
2020-12-07 09:17:44,201 maskrcnn_benchmark INFO: reloading weigts from r1_fin.pth
2020-12-07 09:17:54,323 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.weight
2020-12-07 09:17:54,323 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.bias
2020-12-07 09:17:54,324 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.weight
2020-12-07 09:17:54,324 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.bias
2020-12-07 09:17:54,324 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.weight
2020-12-07 09:17:54,324 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.bias
2020-12-07 09:17:54,325 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.weight
2020-12-07 09:17:54,325 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.bias
2020-12-07 09:17:54,325 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.weight
2020-12-07 09:17:54,325 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.bias
2020-12-07 09:17:54,325 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.weight
2020-12-07 09:17:54,325 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.bias
2020-12-07 09:17:54,326 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.weight
2020-12-07 09:17:54,326 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.bias
2020-12-07 09:17:54,496 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-12-07 09:23:01,178 maskrcnn_benchmark INFO: Using 1 GPUs
2020-12-07 09:23:01,178 maskrcnn_benchmark INFO: Namespace(config_file='d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml', custom_dict='custom_dict.txt', distributed=False, local_rank=0, opts=[], skip_test=False, weights='visdrone_model_0360000.pth')
2020-12-07 09:23:01,178 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2020-12-07 09:23:03,298 maskrcnn_benchmark INFO: 
PyTorch version: 1.1.0
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: Ubuntu 16.04.7 LTS
GCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
CMake version: version 3.5.1

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: GPU 0: GeForce GTX 950M
Nvidia driver version: 450.80.02
cuDNN version: /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.4

Versions of relevant libraries:
[pip3] numpy==1.19.4
[pip3] torch==1.1.0
[pip3] torchvision==0.3.0
[conda] blas                      1.0                         mkl  
[conda] mkl                       2020.2                      256  
[conda] mkl-service               2.3.0            py36he904b0f_0  
[conda] mkl_fft                   1.2.0            py36h23d657b_0  
[conda] mkl_random                1.1.1            py36h0573a6f_0  
[conda] pytorch                   1.1.0           py3.6_cuda9.0.176_cudnn7.5.1_0    pytorch
[conda] pytorch-nightly           1.0.0.dev20190328 py3.6_cuda9.0.176_cudnn7.4.2_0    pytorch
[conda] torchvision               0.3.0           py36_cu9.0.176_1    pytorch
        Pillow (8.0.1)
2020-12-07 09:23:03,298 maskrcnn_benchmark INFO: Loaded configuration file d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml
2020-12-07 09:23:03,298 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "e2e_faster_rcnn_X_101_32x8d_FPN_1x.pth"
  BACKBONE:
    CONV_BODY: "R-101-FPN"
    FREEZE_CONV_BODY_AT: 5
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 1000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    STRIDE_IN_1X1: False
    NUM_GROUPS: 32
    WIDTH_PER_GROUP: 8
DATASETS:
  TRAIN: ("giro1_train","giro4_train","giro5_train" )
  TEST: ("giro1_test","giro4_test","giro5_test")
DATALOADER:
  SIZE_DIVISIBILITY: 32
  NUM_WORKERS: 0
SOLVER:
  BASE_LR: 0.00000002
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000,)
  MAX_ITER: 1500
  IMS_PER_BATCH: 2
TEST:
  IMS_PER_BATCH: 1

2020-12-07 09:23:03,299 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('giro1_test', 'giro4_test', 'giro5_test')
  TRAIN: ('giro1_train', 'giro4_train', 'giro5_train')
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-101-FPN
    FREEZE_CONV_BODY_AT: 5
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FBNET:
    ARCH: default
    ARCH_DEF: 
    BN_TYPE: bn
    DET_HEAD_BLOCKS: []
    DET_HEAD_LAST_SCALE: 1.0
    DET_HEAD_STRIDE: 0
    DW_CONV_SKIP_BN: True
    DW_CONV_SKIP_RELU: True
    KPTS_HEAD_BLOCKS: []
    KPTS_HEAD_LAST_SCALE: 0.0
    KPTS_HEAD_STRIDE: 0
    MASK_HEAD_BLOCKS: []
    MASK_HEAD_LAST_SCALE: 0.0
    MASK_HEAD_STRIDE: 0
    RPN_BN_TYPE: 
    RPN_HEAD_BLOCKS: 0
    SCALE_FACTOR: 1.0
    WIDTH_DIVISOR: 1
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: False
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    NUM_GROUPS: 32
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: False
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 8
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: ResNet50Conv5ROIFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 1000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: visdrone_model_0360000.pth
OUTPUT_DIR: .
PATHS_CATALOG: /zold137/maskrcnn_benchmark/config/paths_catalog.py
SOLVER:
  BASE_LR: 2e-08
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  MAX_ITER: 1500
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 1
2020-12-07 09:23:04,844 maskrcnn_benchmark INFO: reloading weigts from r1_fin.pth
2020-12-07 09:23:06,884 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.weight
2020-12-07 09:23:06,884 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.bias
2020-12-07 09:23:06,884 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.weight
2020-12-07 09:23:06,884 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.bias
2020-12-07 09:23:06,885 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.weight
2020-12-07 09:23:06,885 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.bias
2020-12-07 09:23:06,885 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.weight
2020-12-07 09:23:06,885 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.bias
2020-12-07 09:23:06,885 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.weight
2020-12-07 09:23:06,885 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.bias
2020-12-07 09:23:06,886 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.weight
2020-12-07 09:23:06,886 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.bias
2020-12-07 09:23:06,886 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.weight
2020-12-07 09:23:06,886 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.bias
2020-12-07 09:23:07,053 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-12-07 09:24:47,582 maskrcnn_benchmark.trainer INFO: Start training
2020-12-07 11:20:41,699 maskrcnn_benchmark INFO: Using 1 GPUs
2020-12-07 11:20:41,699 maskrcnn_benchmark INFO: Namespace(config_file='d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml', custom_dict='custom_dict.txt', distributed=False, local_rank=0, opts=[], skip_test=False, weights='visdrone_model_0360000.pth')
2020-12-07 11:20:41,699 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2020-12-07 11:20:44,247 maskrcnn_benchmark INFO: 
PyTorch version: 1.1.0
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: Ubuntu 16.04.7 LTS
GCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
CMake version: version 3.5.1

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: GPU 0: GeForce GTX 950M
Nvidia driver version: 450.80.02
cuDNN version: /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.4

Versions of relevant libraries:
[pip3] numpy==1.19.4
[pip3] torch==1.1.0
[pip3] torchvision==0.3.0
[conda] blas                      1.0                         mkl  
[conda] mkl                       2020.2                      256  
[conda] mkl-service               2.3.0            py36he904b0f_0  
[conda] mkl_fft                   1.2.0            py36h23d657b_0  
[conda] mkl_random                1.1.1            py36h0573a6f_0  
[conda] pytorch                   1.1.0           py3.6_cuda9.0.176_cudnn7.5.1_0    pytorch
[conda] pytorch-nightly           1.0.0.dev20190328 py3.6_cuda9.0.176_cudnn7.4.2_0    pytorch
[conda] torchvision               0.3.0           py36_cu9.0.176_1    pytorch
        Pillow (8.0.1)
2020-12-07 11:20:44,247 maskrcnn_benchmark INFO: Loaded configuration file d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml
2020-12-07 11:20:44,248 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "e2e_faster_rcnn_X_101_32x8d_FPN_1x.pth"
  BACKBONE:
    CONV_BODY: "R-101-FPN"
    FREEZE_CONV_BODY_AT: 5
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 1000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    STRIDE_IN_1X1: False
    NUM_GROUPS: 32
    WIDTH_PER_GROUP: 8
DATASETS:
  TRAIN: ("giro1_train","giro4_train","giro8_train","giro9_train" )
  TEST: ("giro1_test","giro4_test","giro8_test","giro9_test")
DATALOADER:
  SIZE_DIVISIBILITY: 32
  NUM_WORKERS: 0
SOLVER:
  BASE_LR: 0.00000002
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000,)
  MAX_ITER: 1500
  IMS_PER_BATCH: 2
TEST:
  IMS_PER_BATCH: 1

2020-12-07 11:20:44,250 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('giro1_test', 'giro4_test', 'giro8_test', 'giro9_test')
  TRAIN: ('giro1_train', 'giro4_train', 'giro8_train', 'giro9_train')
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-101-FPN
    FREEZE_CONV_BODY_AT: 5
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FBNET:
    ARCH: default
    ARCH_DEF: 
    BN_TYPE: bn
    DET_HEAD_BLOCKS: []
    DET_HEAD_LAST_SCALE: 1.0
    DET_HEAD_STRIDE: 0
    DW_CONV_SKIP_BN: True
    DW_CONV_SKIP_RELU: True
    KPTS_HEAD_BLOCKS: []
    KPTS_HEAD_LAST_SCALE: 0.0
    KPTS_HEAD_STRIDE: 0
    MASK_HEAD_BLOCKS: []
    MASK_HEAD_LAST_SCALE: 0.0
    MASK_HEAD_STRIDE: 0
    RPN_BN_TYPE: 
    RPN_HEAD_BLOCKS: 0
    SCALE_FACTOR: 1.0
    WIDTH_DIVISOR: 1
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: False
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    NUM_GROUPS: 32
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: False
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 8
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: ResNet50Conv5ROIFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 1000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: visdrone_model_0360000.pth
OUTPUT_DIR: .
PATHS_CATALOG: /zold137/maskrcnn_benchmark/config/paths_catalog.py
SOLVER:
  BASE_LR: 2e-08
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  MAX_ITER: 1500
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 1
2020-12-07 11:20:45,812 maskrcnn_benchmark INFO: reloading weigts from r1_fin.pth
2020-12-07 11:20:47,918 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.weight
2020-12-07 11:20:47,918 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.bias
2020-12-07 11:20:47,918 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.weight
2020-12-07 11:20:47,919 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.bias
2020-12-07 11:20:47,919 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.weight
2020-12-07 11:20:47,919 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.bias
2020-12-07 11:20:47,919 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.weight
2020-12-07 11:20:47,919 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.bias
2020-12-07 11:20:47,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.weight
2020-12-07 11:20:47,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.bias
2020-12-07 11:20:47,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.weight
2020-12-07 11:20:47,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.bias
2020-12-07 11:20:47,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.weight
2020-12-07 11:20:47,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.bias
2020-12-07 11:20:48,091 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-12-07 11:22:48,634 maskrcnn_benchmark.trainer INFO: Start training
2020-12-07 11:47:34,902 maskrcnn_benchmark INFO: Using 1 GPUs
2020-12-07 11:47:34,902 maskrcnn_benchmark INFO: Namespace(config_file='d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml', custom_dict='custom_dict.txt', distributed=False, local_rank=0, opts=[], skip_test=False, weights='visdrone_model_0360000.pth')
2020-12-07 11:47:34,902 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2020-12-07 11:47:37,237 maskrcnn_benchmark INFO: 
PyTorch version: 1.1.0
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: Ubuntu 16.04.7 LTS
GCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
CMake version: version 3.5.1

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: GPU 0: GeForce GTX 950M
Nvidia driver version: 450.80.02
cuDNN version: /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.4

Versions of relevant libraries:
[pip3] numpy==1.19.4
[pip3] torch==1.1.0
[pip3] torchvision==0.3.0
[conda] blas                      1.0                         mkl  
[conda] mkl                       2020.2                      256  
[conda] mkl-service               2.3.0            py36he904b0f_0  
[conda] mkl_fft                   1.2.0            py36h23d657b_0  
[conda] mkl_random                1.1.1            py36h0573a6f_0  
[conda] pytorch                   1.1.0           py3.6_cuda9.0.176_cudnn7.5.1_0    pytorch
[conda] pytorch-nightly           1.0.0.dev20190328 py3.6_cuda9.0.176_cudnn7.4.2_0    pytorch
[conda] torchvision               0.3.0           py36_cu9.0.176_1    pytorch
        Pillow (8.0.1)
2020-12-07 11:47:37,237 maskrcnn_benchmark INFO: Loaded configuration file d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml
2020-12-07 11:47:37,237 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "e2e_faster_rcnn_X_101_32x8d_FPN_1x.pth"
  BACKBONE:
    CONV_BODY: "R-101-FPN"
    FREEZE_CONV_BODY_AT: 5
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 1000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    STRIDE_IN_1X1: False
    NUM_GROUPS: 32
    WIDTH_PER_GROUP: 8
DATASETS:
  TRAIN: ("giro1_train","giro4_train","giro8_train","giro9_train" )
  TEST: ("giro1_test","giro4_test","giro8_test","giro9_test")
DATALOADER:
  SIZE_DIVISIBILITY: 32
  NUM_WORKERS: 0
SOLVER:
  BASE_LR: 0.00000002
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000,)
  MAX_ITER: 1500
  IMS_PER_BATCH: 2
TEST:
  IMS_PER_BATCH: 1

2020-12-07 11:47:37,238 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('giro1_test', 'giro4_test', 'giro8_test', 'giro9_test')
  TRAIN: ('giro1_train', 'giro4_train', 'giro8_train', 'giro9_train')
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-101-FPN
    FREEZE_CONV_BODY_AT: 5
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FBNET:
    ARCH: default
    ARCH_DEF: 
    BN_TYPE: bn
    DET_HEAD_BLOCKS: []
    DET_HEAD_LAST_SCALE: 1.0
    DET_HEAD_STRIDE: 0
    DW_CONV_SKIP_BN: True
    DW_CONV_SKIP_RELU: True
    KPTS_HEAD_BLOCKS: []
    KPTS_HEAD_LAST_SCALE: 0.0
    KPTS_HEAD_STRIDE: 0
    MASK_HEAD_BLOCKS: []
    MASK_HEAD_LAST_SCALE: 0.0
    MASK_HEAD_STRIDE: 0
    RPN_BN_TYPE: 
    RPN_HEAD_BLOCKS: 0
    SCALE_FACTOR: 1.0
    WIDTH_DIVISOR: 1
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: False
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    NUM_GROUPS: 32
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: False
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 8
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: ResNet50Conv5ROIFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 1000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: visdrone_model_0360000.pth
OUTPUT_DIR: .
PATHS_CATALOG: /zold137/maskrcnn_benchmark/config/paths_catalog.py
SOLVER:
  BASE_LR: 2e-08
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  MAX_ITER: 1500
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 1
2020-12-07 11:47:38,846 maskrcnn_benchmark INFO: reloading weigts from r1_fin.pth
2020-12-07 11:47:40,913 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.weight
2020-12-07 11:47:40,913 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.bias
2020-12-07 11:47:40,914 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.weight
2020-12-07 11:47:40,914 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.bias
2020-12-07 11:47:40,914 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.weight
2020-12-07 11:47:40,914 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.bias
2020-12-07 11:47:40,914 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.weight
2020-12-07 11:47:40,915 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.bias
2020-12-07 11:47:40,915 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.weight
2020-12-07 11:47:40,915 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.bias
2020-12-07 11:47:40,915 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.weight
2020-12-07 11:47:40,915 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.bias
2020-12-07 11:47:40,915 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.weight
2020-12-07 11:47:40,915 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.bias
2020-12-07 11:47:41,078 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-12-07 11:47:53,364 maskrcnn_benchmark.trainer INFO: Start training
2020-12-07 14:02:06,023 maskrcnn_benchmark INFO: Using 1 GPUs
2020-12-07 14:02:06,023 maskrcnn_benchmark INFO: Namespace(config_file='d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml', custom_dict='custom_dict.txt', distributed=False, local_rank=0, opts=[], skip_test=False, weights='visdrone_model_0360000.pth')
2020-12-07 14:02:06,023 maskrcnn_benchmark INFO: Collecting env info (might take some time)
2020-12-07 14:02:08,116 maskrcnn_benchmark INFO: 
PyTorch version: 1.1.0
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: Ubuntu 16.04.7 LTS
GCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
CMake version: version 3.5.1

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: GPU 0: GeForce GTX 950M
Nvidia driver version: 450.80.02
cuDNN version: /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.4

Versions of relevant libraries:
[pip3] numpy==1.19.4
[pip3] torch==1.1.0
[pip3] torchvision==0.3.0
[conda] blas                      1.0                         mkl  
[conda] mkl                       2020.2                      256  
[conda] mkl-service               2.3.0            py36he904b0f_0  
[conda] mkl_fft                   1.2.0            py36h23d657b_0  
[conda] mkl_random                1.1.1            py36h0573a6f_0  
[conda] pytorch                   1.1.0           py3.6_cuda9.0.176_cudnn7.5.1_0    pytorch
[conda] pytorch-nightly           1.0.0.dev20190328 py3.6_cuda9.0.176_cudnn7.4.2_0    pytorch
[conda] torchvision               0.3.0           py36_cu9.0.176_1    pytorch
        Pillow (8.0.1)
2020-12-07 14:02:08,117 maskrcnn_benchmark INFO: Loaded configuration file d_e2e_faster_rcnn_X_101_32x8d_FPN_1x_visdrone.yaml
2020-12-07 14:02:08,117 maskrcnn_benchmark INFO: 
MODEL:
  META_ARCHITECTURE: "GeneralizedRCNN"
  WEIGHT: "e2e_faster_rcnn_X_101_32x8d_FPN_1x.pth"
  BACKBONE:
    CONV_BODY: "R-101-FPN"
    FREEZE_CONV_BODY_AT: 5
  RPN:
    USE_FPN: True
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    PRE_NMS_TOP_N_TRAIN: 1000
    PRE_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TEST: 1000
  ROI_HEADS:
    USE_FPN: True
  ROI_BOX_HEAD:
    POOLER_RESOLUTION: 7
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    POOLER_SAMPLING_RATIO: 2
    FEATURE_EXTRACTOR: "FPN2MLPFeatureExtractor"
    PREDICTOR: "FPNPredictor"
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    STRIDE_IN_1X1: False
    NUM_GROUPS: 32
    WIDTH_PER_GROUP: 8
DATASETS:
  TRAIN: ("giro1_train","giro4_train","giro8_train","giro9_train" )
  TEST: ("giro1_test","giro4_test","giro8_test","giro9_test")
DATALOADER:
  SIZE_DIVISIBILITY: 32
  NUM_WORKERS: 0
SOLVER:
  BASE_LR: 0.00000002
  WEIGHT_DECAY: 0.0001
  STEPS: (480000, 640000,)
  MAX_ITER: 1500
  IMS_PER_BATCH: 2
TEST:
  IMS_PER_BATCH: 1

2020-12-07 14:02:08,118 maskrcnn_benchmark INFO: Running with config:
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  NUM_WORKERS: 0
  SIZE_DIVISIBILITY: 32
DATASETS:
  TEST: ('giro1_test', 'giro4_test', 'giro8_test', 'giro9_test')
  TRAIN: ('giro1_train', 'giro4_train', 'giro8_train', 'giro9_train')
INPUT:
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (800,)
  PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
  PIXEL_STD: [1.0, 1.0, 1.0]
  TO_BGR255: True
MODEL:
  BACKBONE:
    CONV_BODY: R-101-FPN
    FREEZE_CONV_BODY_AT: 5
    USE_GN: False
  CLS_AGNOSTIC_BBOX_REG: False
  DEVICE: cuda
  FBNET:
    ARCH: default
    ARCH_DEF: 
    BN_TYPE: bn
    DET_HEAD_BLOCKS: []
    DET_HEAD_LAST_SCALE: 1.0
    DET_HEAD_STRIDE: 0
    DW_CONV_SKIP_BN: True
    DW_CONV_SKIP_RELU: True
    KPTS_HEAD_BLOCKS: []
    KPTS_HEAD_LAST_SCALE: 0.0
    KPTS_HEAD_STRIDE: 0
    MASK_HEAD_BLOCKS: []
    MASK_HEAD_LAST_SCALE: 0.0
    MASK_HEAD_STRIDE: 0
    RPN_BN_TYPE: 
    RPN_HEAD_BLOCKS: 0
    SCALE_FACTOR: 1.0
    WIDTH_DIVISOR: 1
  FPN:
    USE_GN: False
    USE_RELU: False
  GROUP_NORM:
    DIM_PER_GP: -1
    EPSILON: 1e-05
    NUM_GROUPS: 32
  KEYPOINT_ON: False
  MASK_ON: False
  META_ARCHITECTURE: GeneralizedRCNN
  RESNETS:
    BACKBONE_OUT_CHANNELS: 256
    NUM_GROUPS: 32
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_FUNC: StemWithFixedBatchNorm
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: False
    TRANS_FUNC: BottleneckWithFixedBatchNorm
    WIDTH_PER_GROUP: 8
  RETINANET:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDES: (8, 16, 32, 64, 128)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BBOX_REG_BETA: 0.11
    BBOX_REG_WEIGHT: 4.0
    BG_IOU_THRESHOLD: 0.4
    FG_IOU_THRESHOLD: 0.5
    INFERENCE_TH: 0.05
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.4
    NUM_CLASSES: 81
    NUM_CONVS: 4
    OCTAVE: 2.0
    PRE_NMS_TOP_N: 1000
    PRIOR_PROB: 0.01
    SCALES_PER_OCTAVE: 3
    STRADDLE_THRESH: 0
    USE_C5: True
  RETINANET_ON: False
  ROI_BOX_HEAD:
    CONV_HEAD_DIM: 256
    DILATION: 1
    FEATURE_EXTRACTOR: FPN2MLPFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 81
    NUM_STACKED_CONVS: 4
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_SCALES: (0.25, 0.125, 0.0625, 0.03125)
    PREDICTOR: FPNPredictor
    USE_GN: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    BG_IOU_THRESHOLD: 0.5
    DETECTIONS_PER_IMG: 100
    FG_IOU_THRESHOLD: 0.5
    NMS: 0.5
    POSITIVE_FRACTION: 0.25
    SCORE_THRESH: 0.05
    USE_FPN: True
  ROI_KEYPOINT_HEAD:
    CONV_LAYERS: (512, 512, 512, 512, 512, 512, 512, 512)
    FEATURE_EXTRACTOR: KeypointRCNNFeatureExtractor
    MLP_HEAD_DIM: 1024
    NUM_CLASSES: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    PREDICTOR: KeypointRCNNPredictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
  ROI_MASK_HEAD:
    CONV_LAYERS: (256, 256, 256, 256)
    DILATION: 1
    FEATURE_EXTRACTOR: ResNet50Conv5ROIFeatureExtractor
    MLP_HEAD_DIM: 1024
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_SCALES: (0.0625,)
    POSTPROCESS_MASKS: False
    POSTPROCESS_MASKS_THRESHOLD: 0.5
    PREDICTOR: MaskRCNNC4Predictor
    RESOLUTION: 14
    SHARE_BOX_FEATURE_EXTRACTOR: True
    USE_GN: False
  RPN:
    ANCHOR_SIZES: (32, 64, 128, 256, 512)
    ANCHOR_STRIDE: (4, 8, 16, 32, 64)
    ASPECT_RATIOS: (0.5, 1.0, 2.0)
    BATCH_SIZE_PER_IMAGE: 256
    BG_IOU_THRESHOLD: 0.3
    FG_IOU_THRESHOLD: 0.7
    FPN_POST_NMS_TOP_N_TEST: 1000
    FPN_POST_NMS_TOP_N_TRAIN: 2000
    MIN_SIZE: 0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOP_N_TEST: 1000
    POST_NMS_TOP_N_TRAIN: 2000
    PRE_NMS_TOP_N_TEST: 1000
    PRE_NMS_TOP_N_TRAIN: 1000
    RPN_HEAD: SingleConvRPNHead
    STRADDLE_THRESH: 0
    USE_FPN: True
  RPN_ONLY: False
  WEIGHT: visdrone_model_0360000.pth
OUTPUT_DIR: .
PATHS_CATALOG: /zold137/maskrcnn_benchmark/config/paths_catalog.py
SOLVER:
  BASE_LR: 2e-08
  BIAS_LR_FACTOR: 2
  CHECKPOINT_PERIOD: 2500
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  MAX_ITER: 1500
  MOMENTUM: 0.9
  STEPS: (480000, 640000)
  WARMUP_FACTOR: 0.3333333333333333
  WARMUP_ITERS: 500
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0
TEST:
  DETECTIONS_PER_IMG: 100
  EXPECTED_RESULTS: []
  EXPECTED_RESULTS_SIGMA_TOL: 4
  IMS_PER_BATCH: 1
2020-12-07 14:02:09,712 maskrcnn_benchmark INFO: reloading weigts from r1_fin.pth
2020-12-07 14:02:11,918 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.weight
2020-12-07 14:02:11,918 maskrcnn_benchmark INFO: unfroze: rpn.head.conv.bias
2020-12-07 14:02:11,918 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.weight
2020-12-07 14:02:11,918 maskrcnn_benchmark INFO: unfroze: rpn.head.cls_logits.bias
2020-12-07 14:02:11,919 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.weight
2020-12-07 14:02:11,919 maskrcnn_benchmark INFO: unfroze: rpn.head.bbox_pred.bias
2020-12-07 14:02:11,919 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.weight
2020-12-07 14:02:11,919 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc6.bias
2020-12-07 14:02:11,919 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.weight
2020-12-07 14:02:11,919 maskrcnn_benchmark INFO: unfroze: roi_heads.box.feature_extractor.fc7.bias
2020-12-07 14:02:11,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.weight
2020-12-07 14:02:11,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.cls_score.bias
2020-12-07 14:02:11,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.weight
2020-12-07 14:02:11,920 maskrcnn_benchmark INFO: unfroze: roi_heads.box.predictor.bbox_pred.bias
2020-12-07 14:02:12,089 maskrcnn_benchmark.data.build WARNING: When using more than one image per GPU you may encounter an out-of-memory (OOM) error if your GPU does not have sufficient memory. If this happens, you can reduce SOLVER.IMS_PER_BATCH (for training) or TEST.IMS_PER_BATCH (for inference). For training, you must also adjust the learning rate and schedule length according to the linear scaling rule. See for example: https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14
2020-12-07 14:02:14,260 maskrcnn_benchmark.trainer INFO: Start training
2020-12-07 14:03:30,023 maskrcnn_benchmark.trainer INFO: eta: 1:33:24  iter: 20  loss: 2.5566 (3.4951)  loss_classifier: 1.0181 (1.2778)  loss_box_reg: 0.4496 (0.5616)  loss_objectness: 0.9852 (1.1789)  loss_rpn_box_reg: 0.1162 (0.4769)  time: 3.7762 (3.7870)  data: 0.1460 (0.1467)  lr: 0.000000  max mem: 1423
2020-12-07 14:04:45,672 maskrcnn_benchmark.trainer INFO: eta: 1:32:06  iter: 40  loss: 2.1277 (3.4236)  loss_classifier: 0.7975 (1.2599)  loss_box_reg: 0.3463 (0.5468)  loss_objectness: 0.8722 (1.1339)  loss_rpn_box_reg: 0.0981 (0.4830)  time: 3.7835 (3.7852)  data: 0.1438 (0.1454)  lr: 0.000000  max mem: 1423
2020-12-07 14:06:01,389 maskrcnn_benchmark.trainer INFO: eta: 1:30:51  iter: 60  loss: 2.3792 (4.0782)  loss_classifier: 0.9687 (1.2546)  loss_box_reg: 0.4888 (0.5635)  loss_objectness: 0.6734 (1.1427)  loss_rpn_box_reg: 0.0935 (1.1174)  time: 3.7837 (3.7855)  data: 0.1356 (0.1434)  lr: 0.000000  max mem: 1423
2020-12-07 14:07:18,174 maskrcnn_benchmark.trainer INFO: eta: 1:29:54  iter: 80  loss: 3.1301 (4.3265)  loss_classifier: 1.1431 (1.2339)  loss_box_reg: 0.6410 (0.6040)  loss_objectness: 0.6379 (1.1570)  loss_rpn_box_reg: 0.0879 (1.3316)  time: 3.7918 (3.7989)  data: 0.1421 (0.1432)  lr: 0.000000  max mem: 1423
2020-12-07 14:08:34,545 maskrcnn_benchmark.trainer INFO: eta: 1:28:43  iter: 100  loss: 1.8773 (3.8440)  loss_classifier: 0.8139 (1.1583)  loss_box_reg: 0.4010 (0.5832)  loss_objectness: 0.4506 (1.0183)  loss_rpn_box_reg: 0.0352 (1.0842)  time: 3.7873 (3.8028)  data: 0.1415 (0.1428)  lr: 0.000000  max mem: 1423
2020-12-07 14:08:34,547 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 14:08:35,252 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 14:10:49,915 maskrcnn_benchmark.inference INFO: Total run time: 0:02:14.662649 (1.4637244473332944 s / img per device, on 1 devices)
2020-12-07 14:10:49,915 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:08.797162 (1.399969150190768 s / img per device, on 1 devices)
2020-12-07 14:10:49,915 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 14:10:55,277 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 14:10:55,277 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([0.0117, 0.0074, 0.0000, 0.0000, 0.0000, 0.0658, 0.0617, 0.0389, 0.0000,
        0.2791, 0.0395, 0.0793, 0.0000, 0.0000, 0.1209, 0.1341, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0453, 0.0023, 0.0817, 0.0576, 0.0000, 0.0000, 0.0104,
        0.0083, 0.0008, 0.0000, 0.0721, 0.0135, 0.0078, 0.0011, 0.0000, 0.0000,
        0.0000, 0.0148, 0.0000, 0.0078, 0.0362, 0.0116, 0.1333, 0.0672, 0.0000,
        0.0621, 0.0302, 0.0169, 0.0050, 0.2270, 0.0410, 0.0066, 0.0630, 0.0705,
        0.1050, 0.0174, 0.0000, 0.0000, 0.0000, 0.0221, 0.0000, 0.0639, 0.0000,
        0.0781, 0.0000, 0.1749, 0.0000, 0.0000, 0.0000, 0.0916, 0.0243, 0.0000,
        0.0000, 0.0341, 0.0038, 0.0396, 0.0000, 0.0020, 0.1105, 0.0320, 0.0174,
        0.0030, 0.0248, 0.0000, 0.0201, 0.0000, 0.0639, 0.1070, 0.0100, 0.0768,
        0.2434, 0.0000, 0.1192, 0.0213, 0.0000, 0.0000, 0.0000, 0.0416, 0.0000,
        0.0000, 0.0718, 0.0025, 0.0020, 0.0767, 0.0204, 0.0106, 0.0000, 0.0716,
        0.0822, 0.2383, 0.1741, 0.1099, 0.0214, 0.3021, 0.0000, 0.0000, 0.0000,
        0.0000, 0.2400, 0.0003, 0.0000, 0.0000, 0.0898, 0.0171, 0.1319, 0.1064,
        0.0082, 0.0000, 0.0237, 0.0216, 0.0158, 0.0000, 0.0148, 0.0133, 0.0017]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 3., 8., 8.,
        8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8.,
        8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8.,
        8., 8., 8., 8., 8., 6., 8., 8., 8., 8., 8., 8., 5., 6., 8., 8., 8., 8.,
        6., 8., 5., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 3., 8., 3., 8.,
        8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 3., 8., 8., 3., 8., 8., 8., 8.,
        8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 3., 8., 8., 8., 8., 8., 8., 8.,
        8., 8., 8., 8., 8., 8., 8., 8., 8.]), 'best match scores': tensor([0.7006, 1.0000, 0.2870, 1.0000, 1.0000, 1.0000, 0.3088, 1.0000, 1.0000,
        0.5760, 1.0000, 0.9997, 0.3551, 0.4928, 0.0762, 1.0000, 1.0000, 0.9931,
        1.0000, 1.0000, 0.0663, 1.0000, 0.7456, 1.0000, 1.0000, 0.9897, 0.1092,
        1.0000, 1.0000, 1.0000, 1.0000, 0.8724, 1.0000, 1.0000, 0.5657, 0.9914,
        1.0000, 0.9303, 0.9999, 1.0000, 0.9738, 1.0000, 1.0000, 0.6185, 0.9972,
        0.2512, 0.2116, 1.0000, 0.7716, 1.0000, 1.0000, 1.0000, 1.0000, 0.9993,
        1.0000, 0.9997, 1.0000, 0.0568, 0.9477, 1.0000, 0.8334, 1.0000, 1.0000,
        0.3853, 0.9929, 0.8692, 1.0000, 0.9980, 0.6057, 1.0000, 1.0000, 0.9758,
        1.0000, 0.0737, 0.9752, 0.9949, 1.0000, 0.4521, 1.0000, 1.0000, 1.0000,
        0.2407, 1.0000, 1.0000, 0.9971, 1.0000, 0.9999, 0.4639, 0.9812, 0.8532,
        0.9863, 0.0515, 1.0000, 0.9999, 1.0000, 0.9943, 0.6454, 0.9999, 1.0000,
        1.0000, 0.8890, 0.9872, 1.0000, 1.0000, 0.9852, 1.0000, 0.9997, 1.0000,
        1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9974, 1.0000, 1.0000,
        0.3920, 0.0835, 1.0000, 0.1764, 0.1189, 0.9414, 0.4741, 1.0000, 0.0652,
        0.9875, 1.0000, 1.0000, 0.3099, 0.9841, 1.0000, 1.0000, 0.9693, 1.0000]), 'num_pos': 135}
2020-12-07 14:10:55,335 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.918519
2020-12-07 14:10:55,338 maskrcnn_benchmark.utils.checkpoint INFO: Saving checkpoint to ./_best_acc_r2.pth
2020-12-07 14:10:55,972 maskrcnn_benchmark.trainer INFO: current record in accuracy, saving model to: _best_acc_r2
2020-12-07 14:12:13,118 maskrcnn_benchmark.trainer INFO: eta: 1:54:46  iter: 120  loss: 1.3526 (3.6044)  loss_classifier: 0.6780 (1.1139)  loss_box_reg: 0.3878 (0.5626)  loss_objectness: 0.4243 (0.9499)  loss_rpn_box_reg: 0.0337 (0.9780)  time: 3.7822 (4.9905)  data: 0.1388 (1.3338)  lr: 0.000000  max mem: 1423
2020-12-07 14:13:28,689 maskrcnn_benchmark.trainer INFO: eta: 1:49:11  iter: 140  loss: 1.4380 (3.5862)  loss_classifier: 0.4826 (1.0605)  loss_box_reg: 0.3032 (0.5388)  loss_objectness: 0.4175 (0.9334)  loss_rpn_box_reg: 0.0502 (1.0535)  time: 3.7789 (4.8173)  data: 0.1437 (1.1632)  lr: 0.000000  max mem: 1423
2020-12-07 14:14:44,259 maskrcnn_benchmark.trainer INFO: eta: 1:44:41  iter: 160  loss: 1.2674 (3.4358)  loss_classifier: 0.4827 (1.0199)  loss_box_reg: 0.2591 (0.5149)  loss_objectness: 0.4067 (0.8969)  loss_rpn_box_reg: 0.0648 (1.0042)  time: 3.7779 (4.6875)  data: 0.1372 (1.0353)  lr: 0.000000  max mem: 1423
2020-12-07 14:15:59,872 maskrcnn_benchmark.trainer INFO: eta: 1:40:54  iter: 180  loss: 1.6159 (3.4681)  loss_classifier: 0.6585 (1.0319)  loss_box_reg: 0.4190 (0.5116)  loss_objectness: 0.3810 (0.8980)  loss_rpn_box_reg: 0.0613 (1.0266)  time: 3.7806 (4.5867)  data: 0.1372 (0.9357)  lr: 0.000000  max mem: 1423
2020-12-07 14:17:15,459 maskrcnn_benchmark.trainer INFO: eta: 1:37:37  iter: 200  loss: 1.8057 (3.3995)  loss_classifier: 0.6948 (1.0439)  loss_box_reg: 0.5378 (0.5144)  loss_objectness: 0.3464 (0.8692)  loss_rpn_box_reg: 0.0468 (0.9719)  time: 3.7796 (4.5060)  data: 0.1381 (0.8561)  lr: 0.000000  max mem: 1423
2020-12-07 14:17:15,461 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 14:17:15,481 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 14:19:29,397 maskrcnn_benchmark.inference INFO: Total run time: 0:02:13.915151 (1.4555994712788125 s / img per device, on 1 devices)
2020-12-07 14:19:29,397 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:08.878012 (1.4008479610733364 s / img per device, on 1 devices)
2020-12-07 14:19:29,397 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 14:19:34,737 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 14:19:34,737 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([8.8269e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 4.9442e-02,
        1.0986e-01, 2.4734e-02, 0.0000e+00, 9.4378e-02, 1.1297e-05, 1.1775e-01,
        0.0000e+00, 0.0000e+00, 9.3024e-02, 1.0023e-01, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 3.6214e-02, 7.8242e-04, 2.4197e-02, 5.7581e-02,
        0.0000e+00, 0.0000e+00, 1.2090e-02, 7.5208e-03, 8.8889e-04, 0.0000e+00,
        1.4120e-01, 2.6796e-02, 7.7722e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.4777e-02, 0.0000e+00, 8.7929e-03, 3.6214e-02, 2.6793e-02,
        7.8021e-02, 0.0000e+00, 8.7033e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.1278e-01, 0.0000e+00, 0.0000e+00, 6.3048e-02, 1.9244e-03,
        9.5325e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.3198e-02, 6.3932e-02,
        0.0000e+00, 7.0456e-02, 0.0000e+00, 1.1975e-01, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 9.1601e-02, 3.4766e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 7.3032e-03, 0.0000e+00, 0.0000e+00, 7.2831e-02, 2.7927e-02,
        0.0000e+00, 0.0000e+00, 2.4133e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.5296e-02, 0.0000e+00, 1.0086e-02, 7.6842e-02, 0.0000e+00, 0.0000e+00,
        1.1919e-01, 4.9979e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.5222e-02,
        0.0000e+00, 0.0000e+00, 6.2997e-02, 0.0000e+00, 0.0000e+00, 3.7170e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 7.1595e-02, 0.0000e+00, 2.3833e-01,
        1.7408e-01, 1.0994e-01, 4.1017e-02, 9.2377e-02, 1.3801e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.3469e-02, 6.2192e-03, 0.0000e+00, 0.0000e+00,
        9.0247e-02, 5.6356e-03, 8.3650e-02, 8.3896e-03, 0.0000e+00, 0.0000e+00,
        3.9876e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.8226e-02, 1.4777e-02,
        4.9532e-03]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,  3.,  3.,
         8.,  3.,  8.,  8.,  8.,  8.,  8.,  3.,  3.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  5.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  5.,  8.,  8.,  8.,  8.,
         6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  6.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8., -1.,  8.,  6.,  8.,  8.,  8.,  8.,  6.,  8.,  8.,  6.,  8.,  8.,
         6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         6.,  8.,  8.,  8.,  8.,  8.,  3.]), 'best match scores': tensor([0.8941, 1.0000, 0.4231, 0.0534, 0.9382, 0.9998, 0.0959, 1.0000, 0.9203,
        1.0000, 1.0000, 0.9710, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.1129,
        1.0000, 0.9991, 1.0000, 1.0000, 0.9986, 0.9996, 0.2589, 0.6588, 0.9999,
        1.0000, 1.0000, 0.8934, 0.9998, 0.9752, 1.0000, 1.0000, 0.1094, 1.0000,
        1.0000, 0.4250, 1.0000, 1.0000, 0.1642, 0.9998, 1.0000, 1.0000, 0.8709,
        0.8997, 0.3393, 0.2427, 0.9796, 0.9905, 0.9406, 0.4884, 1.0000, 0.6236,
        0.9992, 0.9552, 0.9898, 1.0000, 0.6241, 0.1542, 0.8210, 1.0000, 0.9981,
        0.1944, 1.0000, 0.9981, 0.6183, 1.0000, 1.0000, 1.0000, 0.2024, 0.0635,
        1.0000, 0.9998, 1.0000, 1.0000, 0.1967, 1.0000, 0.9900, 0.9976, 1.0000,
        0.9955, 0.9938, 1.0000, 1.0000, 1.0000, 0.0987, 0.8678, 0.9736, 1.0000,
        1.0000, 0.9999, 1.0000, 0.1877, 0.4973, 0.2398, 1.0000, 1.0000, 0.9998,
        0.0000, 0.9998, 1.0000, 0.9987, 0.9769, 1.0000, 1.0000, 1.0000, 0.9997,
        1.0000, 0.9873, 0.2041, 1.0000, 1.0000, 0.9948, 1.0000, 0.6196, 0.8435,
        0.9389, 0.9805, 1.0000, 0.9990, 0.8932, 1.0000, 0.1211, 1.0000, 0.9841,
        1.0000, 0.1130, 1.0000, 0.8413, 0.8726, 1.0000, 0.0673]), 'num_pos': 133}
2020-12-07 14:19:34,761 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.842105
2020-12-07 14:20:50,503 maskrcnn_benchmark.trainer INFO: eta: 1:48:14  iter: 220  loss: 2.0008 (3.5403)  loss_classifier: 0.8333 (1.0625)  loss_box_reg: 0.4736 (0.5211)  loss_objectness: 0.3493 (0.8853)  loss_rpn_box_reg: 0.1092 (1.0714)  time: 3.7787 (5.0738)  data: 0.1422 (1.4250)  lr: 0.000000  max mem: 1423
2020-12-07 14:22:06,190 maskrcnn_benchmark.trainer INFO: eta: 1:44:17  iter: 240  loss: 1.5741 (3.5063)  loss_classifier: 0.6711 (1.0548)  loss_box_reg: 0.4618 (0.5200)  loss_objectness: 0.3576 (0.8677)  loss_rpn_box_reg: 0.0757 (1.0637)  time: 3.7851 (4.9664)  data: 0.1348 (1.3176)  lr: 0.000000  max mem: 1423
2020-12-07 14:23:22,165 maskrcnn_benchmark.trainer INFO: eta: 1:40:46  iter: 260  loss: 1.3950 (3.4381)  loss_classifier: 0.7255 (1.0603)  loss_box_reg: 0.3501 (0.5118)  loss_objectness: 0.3513 (0.8455)  loss_rpn_box_reg: 0.0575 (1.0204)  time: 3.7785 (4.8765)  data: 0.1397 (1.2268)  lr: 0.000000  max mem: 1423
2020-12-07 14:24:37,997 maskrcnn_benchmark.trainer INFO: eta: 1:37:34  iter: 280  loss: 1.5021 (3.5120)  loss_classifier: 0.6430 (1.0670)  loss_box_reg: 0.3266 (0.5115)  loss_objectness: 0.3436 (0.8588)  loss_rpn_box_reg: 0.0765 (1.0746)  time: 3.7856 (4.7991)  data: 0.1349 (1.1492)  lr: 0.000000  max mem: 1423
2020-12-07 14:25:53,557 maskrcnn_benchmark.trainer INFO: eta: 1:34:37  iter: 300  loss: 1.5455 (3.5097)  loss_classifier: 0.5805 (1.0618)  loss_box_reg: 0.4904 (0.5253)  loss_objectness: 0.3240 (0.8493)  loss_rpn_box_reg: 0.0687 (1.0733)  time: 3.7768 (4.7310)  data: 0.1401 (1.0818)  lr: 0.000000  max mem: 1423
2020-12-07 14:25:53,559 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 14:25:53,578 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 14:28:07,324 maskrcnn_benchmark.inference INFO: Total run time: 0:02:13.745433 (1.4537547075230142 s / img per device, on 1 devices)
2020-12-07 14:28:07,324 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:08.802790 (1.4000303304713706 s / img per device, on 1 devices)
2020-12-07 14:28:07,324 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 14:28:12,508 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 14:28:12,508 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([8.2893e-03, 7.7277e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.6135e-02,
        8.5615e-02, 0.0000e+00, 4.0791e-02, 6.8122e-04, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.2737e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 2.0908e-01, 1.1418e-03, 8.2047e-03, 5.7581e-02, 0.0000e+00,
        0.0000e+00, 4.8473e-05, 2.2129e-07, 0.0000e+00, 0.0000e+00, 1.4672e-01,
        5.1217e-02, 4.6566e-02, 7.7722e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        3.3979e-02, 0.0000e+00, 7.7713e-03, 0.0000e+00, 2.2814e-02, 6.5961e-02,
        0.0000e+00, 6.2094e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 9.2377e-02,
        6.3048e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        4.9018e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.8077e-02,
        0.0000e+00, 1.0270e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 9.1601e-02,
        4.7044e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.1054e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 3.4719e-03, 0.0000e+00, 0.0000e+00,
        3.9487e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.4407e-02, 0.0000e+00,
        1.0381e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.4762e-01, 1.9398e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 7.4040e-03, 0.0000e+00, 0.0000e+00,
        6.2997e-02, 5.6486e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 7.1595e-02, 8.2207e-02, 2.3833e-01, 7.5443e-02, 1.3651e-01,
        0.0000e+00, 9.2377e-02, 8.3896e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.1172e-04, 0.0000e+00, 0.0000e+00, 3.6214e-02, 5.0070e-03,
        9.7924e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 8.9976e-05, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 4.9532e-03, 1.3105e-03, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,  3.,  3.,  6.,
         3.,  6.,  8.,  8.,  8.,  8.,  3.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,  6.,  8.,  3.,
         6.,  8.,  5.,  8.,  8.,  8., -1.,  5.,  6.,  8.,  8.,  8.,  6.,  8.,
         8.,  8.,  8.,  8.,  6.,  8.,  6.,  8.,  8.,  6.,  6.,  6.,  3.,  6.,
         3.,  8.,  6.,  8.,  8., -1.,  8.,  3.,  6.,  8.,  8.,  8.,  8., -1.,
         8.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,  8.,  6.,  3.,
         8.,  3.,  6.,  8.,  3.]), 'best match scores': tensor([0.9993, 1.0000, 0.2612, 1.0000, 1.0000, 1.0000, 0.9989, 1.0000, 0.1825,
        1.0000, 0.7534, 0.9999, 0.9996, 0.6807, 0.9998, 1.0000, 0.0675, 1.0000,
        0.3741, 0.0762, 1.0000, 1.0000, 0.6838, 0.1558, 0.4321, 1.0000, 0.9993,
        0.8138, 0.9632, 0.4260, 1.0000, 1.0000, 0.9909, 1.0000, 0.9940, 0.7909,
        1.0000, 0.9999, 0.4761, 0.8854, 0.9993, 0.9997, 1.0000, 1.0000, 0.1196,
        1.0000, 1.0000, 1.0000, 1.0000, 0.2419, 0.8225, 1.0000, 1.0000, 1.0000,
        0.3277, 0.6859, 1.0000, 0.6989, 0.1162, 1.0000, 0.5040, 0.9943, 0.0000,
        0.3694, 0.6724, 0.7895, 1.0000, 0.9999, 0.9882, 0.2415, 0.9793, 0.3044,
        0.0545, 0.9904, 1.0000, 0.9727, 1.0000, 0.0536, 1.0000, 0.3072, 0.9516,
        1.0000, 1.0000, 1.0000, 1.0000, 0.8337, 1.0000, 0.9993, 0.8848, 0.0000,
        0.9998, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.0908, 0.0000, 0.1047,
        1.0000, 1.0000, 0.7980, 0.8352, 0.9992, 0.4054, 0.8657, 1.0000, 0.1323,
        0.8121, 0.9962, 0.7490, 0.7342, 0.4240, 0.7399, 1.0000, 0.3229, 0.9562,
        1.0000, 1.0000, 0.6257, 1.0000, 0.9998, 1.0000, 0.9998, 1.0000, 0.7483,
        1.0000, 0.8167, 0.0681, 0.9924, 1.0000]), 'num_pos': 131}
2020-12-07 14:28:12,531 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.687023
2020-12-07 14:29:28,080 maskrcnn_benchmark.trainer INFO: eta: 1:40:24  iter: 320  loss: 1.8553 (3.5591)  loss_classifier: 0.7772 (1.0662)  loss_box_reg: 0.3174 (0.5292)  loss_objectness: 0.3763 (0.8613)  loss_rpn_box_reg: 0.0410 (1.1024)  time: 3.7762 (5.1057)  data: 0.1395 (1.4573)  lr: 0.000000  max mem: 1423
2020-12-07 14:30:43,676 maskrcnn_benchmark.trainer INFO: eta: 1:37:12  iter: 340  loss: 1.3027 (3.4940)  loss_classifier: 0.4756 (1.0581)  loss_box_reg: 0.4270 (0.5252)  loss_objectness: 0.3179 (0.8457)  loss_rpn_box_reg: 0.0311 (1.0650)  time: 3.7812 (5.0277)  data: 0.1366 (1.3797)  lr: 0.000000  max mem: 1423
2020-12-07 14:31:59,212 maskrcnn_benchmark.trainer INFO: eta: 1:34:12  iter: 360  loss: 1.2321 (3.5790)  loss_classifier: 0.5466 (1.0688)  loss_box_reg: 0.3537 (0.5292)  loss_objectness: 0.3283 (0.8577)  loss_rpn_box_reg: 0.0655 (1.1234)  time: 3.7734 (4.9582)  data: 0.1334 (1.3106)  lr: 0.000000  max mem: 1423
2020-12-07 14:33:14,757 maskrcnn_benchmark.trainer INFO: eta: 1:31:23  iter: 380  loss: 2.4287 (3.6090)  loss_classifier: 0.8754 (1.0701)  loss_box_reg: 0.4098 (0.5241)  loss_objectness: 0.3863 (0.8571)  loss_rpn_box_reg: 0.2160 (1.1577)  time: 3.7752 (4.8960)  data: 0.1355 (1.2489)  lr: 0.000000  max mem: 1423
2020-12-07 14:34:30,357 maskrcnn_benchmark.trainer INFO: eta: 1:28:44  iter: 400  loss: 1.1463 (3.6065)  loss_classifier: 0.4767 (1.0582)  loss_box_reg: 0.4798 (0.5275)  loss_objectness: 0.2731 (0.8572)  loss_rpn_box_reg: 0.0482 (1.1636)  time: 3.7765 (4.8402)  data: 0.1400 (1.1935)  lr: 0.000000  max mem: 1423
2020-12-07 14:34:30,359 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 14:34:30,377 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 14:36:44,109 maskrcnn_benchmark.inference INFO: Total run time: 0:02:13.731782 (1.4536063282386116 s / img per device, on 1 devices)
2020-12-07 14:36:44,110 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:08.668935 (1.3985753759093906 s / img per device, on 1 devices)
2020-12-07 14:36:44,110 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 14:36:49,085 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 14:36:49,085 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([7.7722e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0630e-01,
        2.0804e-03, 0.0000e+00, 0.0000e+00, 6.0429e-02, 0.0000e+00, 1.0117e-01,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.6214e-02, 1.9983e-04, 5.9955e-04, 5.7581e-02, 0.0000e+00,
        0.0000e+00, 1.0391e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.4411e-01,
        5.2669e-02, 2.7769e-02, 7.7722e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 7.7713e-03, 0.0000e+00, 1.2366e-02, 6.4698e-02,
        0.0000e+00, 6.2094e-02, 3.0158e-02, 1.6980e-02, 0.0000e+00, 9.2377e-02,
        0.0000e+00, 0.0000e+00, 6.3048e-02, 2.0449e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.3198e-02, 0.0000e+00, 0.0000e+00, 3.4241e-06, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 1.7976e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 6.1691e-02, 0.0000e+00, 0.0000e+00, 2.0475e-08, 2.6596e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.1919e-01,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.0775e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        7.1595e-02, 1.3916e-01, 2.3833e-01, 3.2935e-02, 5.0319e-02, 0.0000e+00,
        0.0000e+00, 1.0825e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.3469e-02,
        3.1172e-04, 0.0000e+00, 0.0000e+00, 3.6214e-02, 2.4139e-04, 1.0183e-01,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        3.4797e-02, 4.9970e-02, 1.3105e-03, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([-1.,  8.,  5.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  3.,
         6.,  6.,  8.,  8.,  8.,  8.,  3.,  3.,  8.,  8.,  8.,  6.,  8.,  8.,
         8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,  8.,  6.,  8.,  8.,
         8.,  8.,  8.,  8.,  8.,  8., -1.,  6.,  8.,  8.,  6.,  8.,  8.,  3.,
         3.,  6.,  6.,  5.,  6.,  8.,  8., -1., -1.,  6.,  5.,  6.,  8.,  8.,
         5.,  8.,  3.,  6.,  3.,  6.,  8.,  5.,  6.,  8.,  3.,  3.,  5.,  8.,
         6.,  8.,  8.,  6.,  8.,  8., -1., -1.,  3.,  6.,  8.,  8.,  8.,  6.,
         6.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,
         8.,  8.,  8.,  6.,  8.,  8.,  8.,  8., -1.,  6.,  8., -1.,  5.,  6.,
         8.,  6.,  8.,  3.]), 'best match scores': tensor([0.0000, 0.9901, 0.8743, 1.0000, 1.0000, 0.1074, 1.0000, 1.0000, 0.9999,
        1.0000, 1.0000, 1.0000, 0.9923, 0.9997, 1.0000, 1.0000, 0.1254, 0.1147,
        0.9387, 1.0000, 0.0880, 0.1886, 0.9991, 1.0000, 0.9096, 0.9990, 1.0000,
        0.8694, 0.8531, 0.9999, 0.7529, 1.0000, 1.0000, 1.0000, 0.9958, 0.9999,
        0.7540, 1.0000, 0.7013, 0.9325, 0.8423, 0.7920, 1.0000, 1.0000, 0.9990,
        1.0000, 1.0000, 1.0000, 0.0000, 1.0000, 1.0000, 0.0820, 0.9995, 0.9994,
        0.9975, 0.9989, 0.6869, 0.9359, 1.0000, 1.0000, 0.9997, 0.9892, 0.1312,
        0.0000, 0.0000, 0.9763, 0.2771, 1.0000, 0.8550, 0.2767, 0.6981, 0.9985,
        0.8729, 1.0000, 0.9882, 0.9997, 0.2088, 0.9116, 1.0000, 1.0000, 0.1327,
        0.1336, 1.0000, 1.0000, 0.9999, 1.0000, 1.0000, 0.9936, 1.0000, 0.9999,
        0.0000, 0.0000, 0.9512, 1.0000, 0.9918, 1.0000, 1.0000, 0.2904, 1.0000,
        0.3359, 0.9702, 1.0000, 0.2100, 0.4405, 0.9967, 0.0681, 0.9989, 0.9184,
        0.1539, 1.0000, 1.0000, 1.0000, 0.0530, 0.8895, 1.0000, 0.3808, 0.7212,
        1.0000, 1.0000, 0.9999, 0.0000, 1.0000, 0.9986, 0.0000, 0.2804, 1.0000,
        0.8413, 0.9969, 0.4898, 1.0000]), 'num_pos': 130}
2020-12-07 14:36:49,104 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.576923
2020-12-07 14:38:04,518 maskrcnn_benchmark.trainer INFO: eta: 1:32:09  iter: 420  loss: 1.3588 (3.5894)  loss_classifier: 0.5169 (1.0519)  loss_box_reg: 0.4046 (0.5265)  loss_objectness: 0.3001 (0.8536)  loss_rpn_box_reg: 0.0427 (1.1575)  time: 3.7730 (5.1197)  data: 0.1375 (1.4735)  lr: 0.000000  max mem: 1423
2020-12-07 14:39:20,041 maskrcnn_benchmark.trainer INFO: eta: 1:29:22  iter: 440  loss: 1.0251 (3.5492)  loss_classifier: 0.3695 (1.0388)  loss_box_reg: 0.2964 (0.5211)  loss_objectness: 0.3215 (0.8476)  loss_rpn_box_reg: 0.0416 (1.1417)  time: 3.7696 (5.0586)  data: 0.1379 (1.4128)  lr: 0.000000  max mem: 1423
2020-12-07 14:40:35,596 maskrcnn_benchmark.trainer INFO: eta: 1:26:43  iter: 460  loss: 1.6836 (3.6053)  loss_classifier: 0.6251 (1.0295)  loss_box_reg: 0.4096 (0.5221)  loss_objectness: 0.3563 (0.8660)  loss_rpn_box_reg: 0.0794 (1.1877)  time: 3.7756 (5.0029)  data: 0.1373 (1.3573)  lr: 0.000000  max mem: 1423
2020-12-07 14:41:51,101 maskrcnn_benchmark.trainer INFO: eta: 1:24:10  iter: 480  loss: 1.1319 (3.5483)  loss_classifier: 0.4407 (1.0196)  loss_box_reg: 0.4017 (0.5215)  loss_objectness: 0.2523 (0.8500)  loss_rpn_box_reg: 0.0525 (1.1572)  time: 3.7726 (4.9517)  data: 0.1323 (1.3063)  lr: 0.000000  max mem: 1423
2020-12-07 14:43:06,989 maskrcnn_benchmark.trainer INFO: eta: 1:21:45  iter: 500  loss: 1.5927 (3.5796)  loss_classifier: 0.7242 (1.0179)  loss_box_reg: 0.4676 (0.5265)  loss_objectness: 0.2532 (0.8487)  loss_rpn_box_reg: 0.0639 (1.1866)  time: 3.7750 (4.9055)  data: 0.1337 (1.2594)  lr: 0.000000  max mem: 1423
2020-12-07 14:43:06,991 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 14:43:07,011 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 14:45:24,374 maskrcnn_benchmark.inference INFO: Total run time: 0:02:17.362164 (1.4930670054062554 s / img per device, on 1 devices)
2020-12-07 14:45:24,374 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:11.991993 (1.4346955807312676 s / img per device, on 1 devices)
2020-12-07 14:45:24,374 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 14:45:29,534 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 14:45:29,534 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([7.7722e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.9658e-02,
        2.0817e-03, 0.0000e+00, 0.0000e+00, 4.4395e-02, 3.9456e-02, 6.2644e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        3.9086e-02, 8.0449e-05, 2.0405e-01, 5.7581e-02, 0.0000e+00, 0.0000e+00,
        9.7490e-03, 1.8386e-03, 0.0000e+00, 0.0000e+00, 1.0217e-01, 5.1961e-02,
        7.7722e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 4.6386e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0723e-02, 6.5961e-02, 0.0000e+00,
        0.0000e+00, 6.2094e-02, 3.0158e-02, 1.4777e-02, 0.0000e+00, 9.2377e-02,
        0.0000e+00, 0.0000e+00, 5.4738e-02, 2.0449e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.3198e-02, 0.0000e+00, 0.0000e+00, 3.0817e-06, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 1.7976e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 4.1960e-02,
        0.0000e+00, 2.3431e-08, 1.9274e-02, 0.0000e+00, 0.0000e+00, 2.0848e-02,
        0.0000e+00, 0.0000e+00, 1.1919e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 7.0525e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.1856e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        5.1593e-04, 2.3833e-01, 0.0000e+00, 5.2987e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.6579e-02, 3.1172e-04,
        0.0000e+00, 0.0000e+00, 3.6214e-02, 2.4139e-04, 1.8472e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8]), 'best match labels': tensor([-1.,  8.,  5.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  6.,
         6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  6.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,
         8.,  8.,  8.,  8.,  8.,  8.,  3.,  6.,  8.,  8.,  5.,  8.,  8.,  8.,
        -1.,  3.,  6.,  8.,  6.,  8.,  8., -1., -1.,  6., -1.,  6.,  8.,  6.,
         8.,  3.,  6.,  6.,  8.,  3.,  3.,  8.,  6.,  5.,  8.,  6.,  8.,  8.,
         6.,  8.,  8., -1., -1.,  3.,  6.,  8.,  8.,  8.,  6.,  8., -1., -1.,
         6.,  8.,  8.,  6.,  3.,  8.,  8.,  8.,  8.,  5.,  8.,  8.,  8.,  8.,
         8.,  8.,  6.,  8.,  8.,  8.,  8., -1.,  6., -1., -1.,  6.]), 'best match scores': tensor([0.0000, 0.6965, 0.9735, 1.0000, 1.0000, 1.0000, 1.0000, 0.9883, 1.0000,
        0.9999, 1.0000, 0.3631, 0.7675, 1.0000, 1.0000, 1.0000, 0.0613, 0.9044,
        0.5475, 0.9481, 0.9981, 1.0000, 0.9998, 1.0000, 1.0000, 0.9993, 0.3078,
        0.8181, 0.4152, 0.7399, 0.9958, 0.9776, 0.1659, 1.0000, 0.9951, 0.9999,
        0.9973, 0.0673, 0.3615, 0.9700, 0.4411, 0.9915, 1.0000, 1.0000, 0.9778,
        0.9999, 0.0593, 0.9999, 0.3208, 0.9656, 1.0000, 0.8552, 0.8320, 0.9953,
        0.1402, 0.1033, 0.0000, 0.6859, 1.0000, 0.7175, 0.9994, 0.2973, 0.0793,
        0.0000, 0.0000, 0.9710, 0.0000, 1.0000, 0.3460, 0.9736, 0.9958, 0.6236,
        1.0000, 0.9962, 0.8449, 0.1156, 0.9643, 1.0000, 0.9982, 0.9991, 1.0000,
        0.9960, 1.0000, 1.0000, 0.9895, 0.8183, 1.0000, 0.0000, 0.0000, 0.9999,
        1.0000, 0.9998, 1.0000, 1.0000, 0.1050, 0.8843, 0.0000, 0.0000, 1.0000,
        0.9963, 1.0000, 0.1321, 1.0000, 0.9945, 0.9985, 0.9969, 0.9600, 0.7664,
        1.0000, 0.4926, 0.9990, 0.4407, 0.9837, 0.9961, 0.9986, 0.0641, 1.0000,
        1.0000, 1.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.9565]), 'num_pos': 124}
2020-12-07 14:45:29,553 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.612903
2020-12-07 14:46:46,586 maskrcnn_benchmark.trainer INFO: eta: 1:23:56  iter: 520  loss: 0.9991 (3.5312)  loss_classifier: 0.4136 (1.0044)  loss_box_reg: 0.3238 (0.5224)  loss_objectness: 0.2198 (0.8320)  loss_rpn_box_reg: 0.0361 (1.1724)  time: 3.8607 (5.1391)  data: 0.1434 (1.4905)  lr: 0.000000  max mem: 1423
2020-12-07 14:48:04,804 maskrcnn_benchmark.trainer INFO: eta: 1:21:29  iter: 540  loss: 2.1561 (3.5248)  loss_classifier: 0.6759 (1.0103)  loss_box_reg: 0.4369 (0.5212)  loss_objectness: 0.3584 (0.8331)  loss_rpn_box_reg: 0.1017 (1.1602)  time: 3.8948 (5.0936)  data: 0.1437 (1.4407)  lr: 0.000000  max mem: 1423
2020-12-07 14:49:22,927 maskrcnn_benchmark.trainer INFO: eta: 1:19:08  iter: 560  loss: 1.9880 (3.5375)  loss_classifier: 0.5070 (1.0086)  loss_box_reg: 0.3163 (0.5189)  loss_objectness: 0.3044 (0.8339)  loss_rpn_box_reg: 0.0995 (1.1761)  time: 3.8958 (5.0512)  data: 0.1431 (1.3944)  lr: 0.000000  max mem: 1423
2020-12-07 14:50:38,810 maskrcnn_benchmark.trainer INFO: eta: 1:16:47  iter: 580  loss: 1.4352 (3.5468)  loss_classifier: 0.5687 (1.0078)  loss_box_reg: 0.3013 (0.5187)  loss_objectness: 0.2806 (0.8337)  loss_rpn_box_reg: 0.0280 (1.1866)  time: 3.7752 (5.0078)  data: 0.1409 (1.3513)  lr: 0.000000  max mem: 1423
2020-12-07 14:51:54,280 maskrcnn_benchmark.trainer INFO: eta: 1:14:30  iter: 600  loss: 0.9591 (3.5541)  loss_classifier: 0.3353 (1.0005)  loss_box_reg: 0.3148 (0.5199)  loss_objectness: 0.2679 (0.8338)  loss_rpn_box_reg: 0.0250 (1.1999)  time: 3.7719 (4.9667)  data: 0.1358 (1.3108)  lr: 0.000000  max mem: 1423
2020-12-07 14:51:54,281 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 14:51:54,301 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 14:54:08,132 maskrcnn_benchmark.inference INFO: Total run time: 0:02:13.830884 (1.4546835215195366 s / img per device, on 1 devices)
2020-12-07 14:54:08,133 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:08.760905 (1.3995750572370447 s / img per device, on 1 devices)
2020-12-07 14:54:08,133 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 14:54:13,348 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 14:54:13,348 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([7.7722e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.7737e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 4.2344e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        3.6214e-02, 8.0449e-05, 1.6624e-03, 1.9753e-03, 0.0000e+00, 0.0000e+00,
        1.0391e-02, 8.3154e-03, 8.7114e-04, 0.0000e+00, 0.0000e+00, 3.5819e-02,
        7.7722e-03, 1.1789e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 7.7713e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 6.2094e-02, 1.4279e-03, 4.9532e-03, 0.0000e+00, 9.2377e-02,
        5.0584e-03, 0.0000e+00, 5.8012e-02, 9.5325e-02, 1.7355e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        3.7467e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.2831e-02, 5.5914e-02,
        1.7355e-02, 0.0000e+00, 2.4051e-02, 0.0000e+00, 3.3428e-02, 0.0000e+00,
        9.7068e-04, 1.2633e-01, 0.0000e+00, 1.3768e-01, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 7.3032e-03, 0.0000e+00, 0.0000e+00, 1.3403e-02,
        6.9396e-02, 0.0000e+00, 4.9543e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        5.5659e-04, 2.3833e-01, 0.0000e+00, 7.0398e-02, 0.0000e+00, 9.2377e-02,
        9.1208e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.4478e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 9.1750e-02, 5.1870e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.4777e-02,
        0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8]), 'best match labels': tensor([ 6.,  8.,  6.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  6.,  3.,  6.,
         8.,  8.,  8.,  5.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  6.,  8.,  8.,  6.,  8.,  6.,  6.,  8.,  8.,  6.,  8.,  8.,  6.,
         8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  8., -1.,  8.,  6.,  6.,
         8.,  8.,  3.,  8.,  5., -1., -1.,  3., -1.,  6.,  8.,  3.,  3.,  3.,
         8.,  3.,  3.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8., -1., -1.,
         3.,  6.,  8.,  8.,  8.,  8., -1.,  8.,  3.,  3.,  6.,  8.,  3.,  8.,
         8.,  8.,  8.,  8.,  8.,  6.,  8.,  6.,  8.,  3.,  3.,  6.,  8.,  8.,
         8., -1., -1.,  3.,  3.,  6.,  8.,  3.,  6.,  8.]), 'best match scores': tensor([1.0000, 0.5307, 0.3731, 0.7857, 0.9907, 1.0000, 0.0620, 1.0000, 1.0000,
        0.9138, 0.9999, 1.0000, 0.9983, 1.0000, 0.5837, 1.0000, 0.9998, 1.0000,
        0.1148, 0.9148, 0.2577, 1.0000, 0.9328, 0.9246, 1.0000, 1.0000, 0.5225,
        0.9967, 0.9991, 0.9961, 0.1827, 0.9418, 1.0000, 0.9760, 0.9257, 0.0809,
        0.6437, 0.1975, 1.0000, 1.0000, 1.0000, 0.9564, 1.0000, 0.9995, 0.6168,
        0.8643, 0.9511, 1.0000, 0.9983, 0.9806, 1.0000, 0.5950, 0.0000, 0.9976,
        1.0000, 1.0000, 0.9156, 1.0000, 1.0000, 0.1487, 0.5488, 0.0000, 0.0000,
        0.0560, 0.0000, 1.0000, 1.0000, 0.9974, 0.9795, 0.1658, 0.0597, 0.6257,
        0.0530, 0.9936, 1.0000, 1.0000, 0.9083, 0.5114, 1.0000, 0.9309, 0.8719,
        1.0000, 0.0000, 0.0000, 0.9998, 1.0000, 0.9721, 0.9999, 0.9999, 0.2878,
        0.0000, 1.0000, 0.8718, 0.9999, 1.0000, 1.0000, 1.0000, 0.9798, 0.9307,
        0.7345, 0.6884, 0.0865, 0.9999, 1.0000, 1.0000, 0.1453, 1.0000, 0.9642,
        0.1518, 1.0000, 1.0000, 0.3279, 0.9990, 0.0000, 0.0000, 0.7124, 0.1717,
        1.0000, 1.0000, 1.0000, 0.4814, 0.2031]), 'num_pos': 122}
2020-12-07 14:54:13,369 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.581967
2020-12-07 14:55:28,870 maskrcnn_benchmark.trainer INFO: eta: 1:15:34  iter: 620  loss: 1.6004 (3.6190)  loss_classifier: 0.5555 (0.9890)  loss_box_reg: 0.5545 (0.5213)  loss_objectness: 0.3536 (0.8468)  loss_rpn_box_reg: 0.0738 (1.2620)  time: 3.7738 (5.1526)  data: 0.1383 (1.4973)  lr: 0.000000  max mem: 1423
2020-12-07 14:56:44,654 maskrcnn_benchmark.trainer INFO: eta: 1:13:14  iter: 640  loss: 2.3680 (3.5950)  loss_classifier: 0.8597 (0.9920)  loss_box_reg: 0.6448 (0.5302)  loss_objectness: 0.3076 (0.8357)  loss_rpn_box_reg: 0.0459 (1.2370)  time: 3.7807 (5.1100)  data: 0.1388 (1.4549)  lr: 0.000000  max mem: 1423
2020-12-07 14:58:02,453 maskrcnn_benchmark.trainer INFO: eta: 1:11:01  iter: 660  loss: 1.4193 (3.6244)  loss_classifier: 0.5517 (0.9825)  loss_box_reg: 0.4303 (0.5296)  loss_objectness: 0.3182 (0.8401)  loss_rpn_box_reg: 0.0541 (1.2721)  time: 3.8869 (5.0730)  data: 0.1459 (1.4153)  lr: 0.000000  max mem: 1423
2020-12-07 14:59:19,284 maskrcnn_benchmark.trainer INFO: eta: 1:08:50  iter: 680  loss: 1.4925 (3.5882)  loss_classifier: 0.5961 (0.9811)  loss_box_reg: 0.4905 (0.5309)  loss_objectness: 0.2850 (0.8272)  loss_rpn_box_reg: 0.0726 (1.2490)  time: 3.8287 (5.0368)  data: 0.1391 (1.3779)  lr: 0.000000  max mem: 1423
2020-12-07 15:00:37,330 maskrcnn_benchmark.trainer INFO: eta: 1:06:43  iter: 700  loss: 1.5726 (3.6041)  loss_classifier: 0.4835 (0.9860)  loss_box_reg: 0.4659 (0.5350)  loss_objectness: 0.2735 (0.8278)  loss_rpn_box_reg: 0.0709 (1.2553)  time: 3.8771 (5.0044)  data: 0.1442 (1.3432)  lr: 0.000000  max mem: 1423
2020-12-07 15:00:37,332 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 15:00:37,352 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 15:02:52,446 maskrcnn_benchmark.inference INFO: Total run time: 0:02:15.093864 (1.468411570009978 s / img per device, on 1 devices)
2020-12-07 15:02:52,446 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:09.968882 (1.412705237450807 s / img per device, on 1 devices)
2020-12-07 15:02:52,447 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 15:02:57,636 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 15:02:57,636 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([2.5431e-02, 7.5106e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0493e-01,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 3.9456e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.6664e-05, 2.4904e-05,
        0.0000e+00, 1.9753e-03, 0.0000e+00, 0.0000e+00, 8.7561e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 7.7722e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 6.5961e-02, 2.8442e-03, 0.0000e+00, 6.2094e-02,
        1.4279e-03, 0.0000e+00, 0.0000e+00, 9.2377e-02, 0.0000e+00, 0.0000e+00,
        3.6544e-02, 1.9265e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 9.4687e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        4.7752e-04, 0.0000e+00, 0.0000e+00, 5.5465e-02, 0.0000e+00, 1.7456e-02,
        0.0000e+00, 0.0000e+00, 1.9818e-02, 0.0000e+00, 1.0172e-01, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 7.0525e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 9.9746e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.2240e-02,
        7.6090e-04, 2.3833e-01, 7.9472e-02, 6.4544e-02, 9.3084e-02, 0.0000e+00,
        8.3896e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.5746e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 9.2063e-02, 2.4139e-04, 7.7217e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 8.,  8.,  3.,  6.,  8.,  8.,  5.,  8.,  6.,  8.,  3.,  6.,  8.,  8.,
         8.,  8.,  6.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  6., -1.,
         5.,  8.,  5.,  5.,  6.,  6.,  6.,  6.,  6.,  8.,  8.,  8.,  8.,  8.,
         8.,  6.,  8.,  8.,  6.,  8.,  8.,  8.,  5., -1.,  5.,  6.,  6.,  8.,
         8.,  8.,  8.,  6.,  6.,  8.,  8.,  3.,  3.,  6.,  8.,  3.,  3.,  8.,
         6.,  8.,  6.,  8.,  8.,  8.,  8., -1., -1., -1.,  6.,  8., -1.,  8.,
         8., -1.,  3.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,  6.,  8.,  2.,
         6.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  6.,  8., -1.,  6.,
         8., -1.,  6.,  8.]), 'best match scores': tensor([0.1163, 0.1927, 1.0000, 1.0000, 0.0864, 0.9981, 0.9902, 1.0000, 1.0000,
        1.0000, 0.5752, 1.0000, 0.1281, 0.9996, 0.9997, 0.5864, 0.5154, 1.0000,
        0.8364, 0.7557, 0.8816, 1.0000, 1.0000, 1.0000, 0.2140, 0.9983, 0.9999,
        0.0000, 0.7600, 1.0000, 0.7161, 0.9768, 0.9888, 1.0000, 1.0000, 0.9994,
        1.0000, 1.0000, 0.9998, 0.5012, 1.0000, 1.0000, 0.9995, 1.0000, 0.4292,
        1.0000, 0.2994, 0.1212, 1.0000, 0.6621, 1.0000, 0.0000, 0.8718, 0.9991,
        1.0000, 0.6729, 1.0000, 0.9999, 0.7194, 1.0000, 1.0000, 0.6055, 0.2614,
        0.2948, 0.8969, 0.0641, 1.0000, 0.9966, 0.3154, 1.0000, 1.0000, 1.0000,
        0.9971, 1.0000, 0.9999, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.9637,
        0.3368, 0.0000, 1.0000, 0.3501, 0.0000, 1.0000, 1.0000, 1.0000, 0.9955,
        1.0000, 0.3547, 1.0000, 0.9886, 0.1787, 0.9872, 0.1738, 1.0000, 0.9999,
        0.9999, 0.8308, 0.0958, 0.7487, 1.0000, 1.0000, 0.4892, 0.1715, 0.9968,
        0.9993, 0.9945, 0.0000, 1.0000, 1.0000, 0.0000, 0.0561, 0.9339]), 'num_pos': 116}
2020-12-07 15:02:57,656 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.543103
2020-12-07 15:04:13,278 maskrcnn_benchmark.trainer INFO: eta: 1:07:08  iter: 720  loss: 1.1142 (3.5673)  loss_classifier: 0.4331 (0.9821)  loss_box_reg: 0.4773 (0.5353)  loss_objectness: 0.2554 (0.8177)  loss_rpn_box_reg: 0.0254 (1.2322)  time: 3.7821 (5.1653)  data: 0.1412 (1.5047)  lr: 0.000000  max mem: 1423
2020-12-07 15:05:29,552 maskrcnn_benchmark.trainer INFO: eta: 1:04:57  iter: 740  loss: 1.1797 (3.5769)  loss_classifier: 0.4836 (0.9782)  loss_box_reg: 0.4308 (0.5332)  loss_objectness: 0.2438 (0.8196)  loss_rpn_box_reg: 0.0480 (1.2459)  time: 3.7825 (5.1288)  data: 0.1391 (1.4680)  lr: 0.000000  max mem: 1423
2020-12-07 15:06:49,116 maskrcnn_benchmark.trainer INFO: eta: 1:02:52  iter: 760  loss: 0.8047 (3.5805)  loss_classifier: 0.2789 (0.9681)  loss_box_reg: 0.2550 (0.5289)  loss_objectness: 0.2685 (0.8203)  loss_rpn_box_reg: 0.0355 (1.2632)  time: 3.9524 (5.0985)  data: 0.1444 (1.4332)  lr: 0.000000  max mem: 1423
2020-12-07 15:08:06,107 maskrcnn_benchmark.trainer INFO: eta: 1:00:47  iter: 780  loss: 1.3902 (3.5639)  loss_classifier: 0.5586 (0.9644)  loss_box_reg: 0.3220 (0.5274)  loss_objectness: 0.2899 (0.8169)  loss_rpn_box_reg: 0.0546 (1.2552)  time: 3.8370 (5.0665)  data: 0.1437 (1.4002)  lr: 0.000000  max mem: 1423
2020-12-07 15:09:24,107 maskrcnn_benchmark.trainer INFO: eta: 0:58:46  iter: 800  loss: 0.8092 (3.5335)  loss_classifier: 0.4093 (0.9597)  loss_box_reg: 0.2942 (0.5249)  loss_objectness: 0.2233 (0.8082)  loss_rpn_box_reg: 0.0602 (1.2406)  time: 3.9092 (5.0373)  data: 0.1446 (1.3688)  lr: 0.000000  max mem: 1423
2020-12-07 15:09:24,109 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 15:09:24,130 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 15:11:40,823 maskrcnn_benchmark.inference INFO: Total run time: 0:02:16.693209 (1.4857957466788914 s / img per device, on 1 devices)
2020-12-07 15:11:40,824 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:11.474759 (1.4290734710900679 s / img per device, on 1 devices)
2020-12-07 15:11:40,824 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 15:11:46,172 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 15:11:46,172 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([7.6715e-03, 3.5396e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.8935e-01, 0.0000e+00, 1.2097e-03, 0.0000e+00, 1.6536e-01, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        3.6214e-02, 8.0449e-05, 1.6619e-03, 1.9753e-03, 0.0000e+00, 0.0000e+00,
        6.4899e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.2095e-02, 5.1547e-02,
        7.7722e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 6.5961e-02, 2.8442e-03, 0.0000e+00,
        6.2094e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 9.2377e-02, 0.0000e+00,
        0.0000e+00, 6.2703e-02, 1.9244e-03, 0.0000e+00, 0.0000e+00, 5.6280e-02,
        0.0000e+00, 0.0000e+00, 7.8077e-02, 0.0000e+00, 1.0270e-01, 2.2040e-02,
        0.0000e+00, 3.7467e-02, 0.0000e+00, 0.0000e+00, 2.3455e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 5.0131e-02, 0.0000e+00, 0.0000e+00,
        1.6440e-02, 0.0000e+00, 9.7068e-04, 1.6619e-03, 0.0000e+00, 6.2796e-04,
        2.6984e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.3032e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.0955e-02, 2.3379e-01, 6.7869e-02, 7.6930e-04, 2.9798e-03, 9.2377e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.3469e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 8.6043e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.4777e-02,
        0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 8.,  8., -1.,  3.,  6.,  3.,  8.,  8.,  8.,  8.,  8.,  3.,  3.,  6.,
         8.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  5.,  8.,  8.,  5.,  6.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  6.,  8.,  8., -1.,  8.,  8.,  8.,  5.,  6.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  6.,  8.,  3.,  3.,  8.,  6.,  6.,  3.,  6.,  8.,
         3.,  6.,  8.,  6.,  8.,  8.,  8.,  8., -1.,  8., -1.,  3.,  8.,  3.,
         8.,  8., -1.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  6.,
         8.,  6.,  8.,  5.,  6.,  8.,  8.,  8.,  8., -1., -1.,  6., -1.,  6.,
         8.,  8., -1.,  8.]), 'best match scores': tensor([0.6952, 1.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.2863, 1.0000, 0.3423,
        1.0000, 0.5572, 0.8167, 0.9855, 0.9939, 0.5250, 1.0000, 0.9985, 0.9565,
        0.8546, 0.0535, 0.9289, 0.9563, 1.0000, 1.0000, 0.8625, 0.1333, 1.0000,
        1.0000, 0.9964, 1.0000, 0.9997, 0.6474, 0.4173, 0.1872, 0.9164, 0.7632,
        0.0568, 0.5428, 0.8228, 0.4545, 0.0607, 1.0000, 1.0000, 0.7485, 1.0000,
        0.5699, 1.0000, 0.0000, 0.9989, 1.0000, 1.0000, 0.9844, 1.0000, 0.9999,
        0.9139, 0.8359, 1.0000, 0.1729, 0.2022, 0.4665, 0.9999, 0.9643, 0.1787,
        1.0000, 0.3333, 0.1028, 1.0000, 0.8352, 0.7494, 1.0000, 0.9994, 1.0000,
        0.7450, 1.0000, 0.9411, 0.9962, 0.9999, 0.9999, 0.0000, 0.9980, 0.0000,
        0.5883, 0.9973, 1.0000, 1.0000, 0.1708, 0.0000, 0.4246, 1.0000, 0.8483,
        0.0829, 0.1336, 1.0000, 0.2017, 0.1419, 0.5462, 0.7815, 0.9992, 1.0000,
        0.6791, 1.0000, 0.0931, 1.0000, 1.0000, 1.0000, 0.0754, 1.0000, 0.0000,
        0.0000, 0.0721, 0.0000, 1.0000, 1.0000, 1.0000, 0.0000, 0.9835]), 'num_pos': 116}
2020-12-07 15:11:46,192 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.620690
2020-12-07 15:13:02,689 maskrcnn_benchmark.trainer INFO: eta: 0:58:43  iter: 820  loss: 1.2168 (3.5313)  loss_classifier: 0.5000 (0.9530)  loss_box_reg: 0.4719 (0.5252)  loss_objectness: 0.2545 (0.8099)  loss_rpn_box_reg: 0.0422 (1.2432)  time: 3.7870 (5.1810)  data: 0.1433 (1.5122)  lr: 0.000000  max mem: 1423
2020-12-07 15:14:20,362 maskrcnn_benchmark.trainer INFO: eta: 0:56:39  iter: 840  loss: 1.0123 (3.5107)  loss_classifier: 0.3956 (0.9512)  loss_box_reg: 0.2848 (0.5211)  loss_objectness: 0.2508 (0.8051)  loss_rpn_box_reg: 0.0728 (1.2332)  time: 3.8911 (5.1501)  data: 0.1399 (1.4797)  lr: 0.000000  max mem: 1423
2020-12-07 15:15:36,108 maskrcnn_benchmark.trainer INFO: eta: 0:54:35  iter: 860  loss: 2.1574 (3.5054)  loss_classifier: 0.9288 (0.9531)  loss_box_reg: 0.4848 (0.5224)  loss_objectness: 0.2966 (0.8008)  loss_rpn_box_reg: 0.1115 (1.2292)  time: 3.7851 (5.1184)  data: 0.1350 (1.4485)  lr: 0.000000  max mem: 1423
2020-12-07 15:16:51,708 maskrcnn_benchmark.trainer INFO: eta: 0:52:34  iter: 880  loss: 1.9667 (3.5468)  loss_classifier: 0.5892 (0.9499)  loss_box_reg: 0.2707 (0.5227)  loss_objectness: 0.3285 (0.8089)  loss_rpn_box_reg: 0.0700 (1.2653)  time: 3.7774 (5.0880)  data: 0.1401 (1.4187)  lr: 0.000000  max mem: 1423
2020-12-07 15:18:07,262 maskrcnn_benchmark.trainer INFO: eta: 0:50:35  iter: 900  loss: 1.4554 (3.5629)  loss_classifier: 0.5100 (0.9493)  loss_box_reg: 0.4915 (0.5229)  loss_objectness: 0.2726 (0.8105)  loss_rpn_box_reg: 0.0803 (1.2803)  time: 3.7747 (5.0589)  data: 0.1394 (1.3904)  lr: 0.000000  max mem: 1423
2020-12-07 15:18:07,264 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 15:18:07,285 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 15:20:21,347 maskrcnn_benchmark.inference INFO: Total run time: 0:02:14.061815 (1.4571936389674311 s / img per device, on 1 devices)
2020-12-07 15:20:21,347 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:08.836769 (1.4003996641739556 s / img per device, on 1 devices)
2020-12-07 15:20:21,347 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 15:20:26,425 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 15:20:26,425 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([7.7696e-03, 3.5396e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.1041e-03, 0.0000e+00, 4.0791e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.5482e-03, 9.1120e-07, 4.9093e-02, 1.9764e-03, 0.0000e+00, 0.0000e+00,
        8.3154e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.1573e-02, 7.7722e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 6.5961e-02, 0.0000e+00, 0.0000e+00,
        6.2094e-02, 0.0000e+00, 5.0568e-02, 0.0000e+00, 9.2377e-02, 0.0000e+00,
        0.0000e+00, 3.4914e-02, 2.0449e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 8.9025e-02, 0.0000e+00, 1.0755e-01,
        9.1601e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 3.4719e-03, 0.0000e+00, 0.0000e+00, 4.9070e-02,
        0.0000e+00, 0.0000e+00, 1.6423e-02, 0.0000e+00, 9.7068e-04, 1.6628e-03,
        0.0000e+00, 1.4250e-01, 3.8309e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 6.2997e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.9255e-04, 2.3759e-01, 0.0000e+00, 2.3949e-02,
        4.1017e-02, 1.0293e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.3469e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 8.3799e-02, 2.4139e-04, 8.3650e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.4777e-02, 0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 8.,  8., -1.,  3.,  6.,  8.,  2.,  8.,  8.,  8.,  5.,  3.,  3.,  6.,
         3.,  8.,  8.,  8.,  6.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8., -1.,  2.,  8.,  3.,  5.,  6.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,
         8.,  8.,  8.,  3.,  8., -1.,  8.,  3.,  8.,  3.,  5.,  8.,  5.,  6.,
         5.,  8.,  5.,  8.,  8., -1.,  6.,  8.,  6.,  3.,  8.,  6.,  8.,  3.,
         3.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  8., -1.,  8., -1.,  3.,
         8.,  8.,  8.,  6., -1.,  3.,  8.,  3.,  3.,  8.,  8.,  8.,  8.,  8.,
         2.,  6.,  8.,  8.,  3.,  3.,  6.,  8.,  8.,  8.,  5.,  6.,  8.,  6.,
         8.,  8.,  8., -1., -1.]), 'best match scores': tensor([0.8816, 0.9993, 0.0000, 0.9171, 1.0000, 0.7884, 0.9876, 1.0000, 0.2418,
        1.0000, 1.0000, 0.9692, 0.9486, 1.0000, 0.0668, 1.0000, 0.2291, 0.6825,
        0.9986, 1.0000, 0.0653, 0.4214, 1.0000, 1.0000, 1.0000, 1.0000, 0.9999,
        1.0000, 0.4695, 0.0000, 0.9996, 0.9965, 1.0000, 0.2523, 0.4838, 0.4681,
        0.9942, 0.0854, 1.0000, 0.9994, 0.8988, 1.0000, 1.0000, 1.0000, 0.3948,
        0.9977, 0.9988, 0.0000, 0.6486, 0.9660, 0.7617, 1.0000, 0.7358, 1.0000,
        0.9438, 1.0000, 0.3438, 0.3341, 0.9994, 0.3738, 0.4759, 0.0000, 0.9999,
        0.9100, 1.0000, 1.0000, 0.2293, 0.5831, 0.8785, 0.8168, 0.8745, 1.0000,
        0.2454, 0.8262, 0.3151, 0.9872, 1.0000, 0.6152, 0.9992, 1.0000, 0.0000,
        0.9998, 0.0000, 0.4585, 1.0000, 0.9820, 0.2645, 0.0580, 0.0000, 1.0000,
        0.9993, 0.2686, 0.2884, 0.7681, 0.5767, 0.9627, 0.6006, 1.0000, 1.0000,
        0.9971, 0.9859, 1.0000, 1.0000, 0.8739, 1.0000, 1.0000, 0.7206, 0.9979,
        1.0000, 1.0000, 0.9968, 1.0000, 1.0000, 0.9716, 1.0000, 0.0000, 0.0000]), 'num_pos': 117}
2020-12-07 15:20:26,443 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.555556
2020-12-07 15:21:41,914 maskrcnn_benchmark.trainer INFO: eta: 0:50:05  iter: 920  loss: 1.2642 (3.5744)  loss_classifier: 0.4723 (0.9430)  loss_box_reg: 0.3933 (0.5234)  loss_objectness: 0.2717 (0.8121)  loss_rpn_box_reg: 0.0396 (1.2958)  time: 3.7717 (5.1822)  data: 0.1425 (1.5145)  lr: 0.000000  max mem: 1423
2020-12-07 15:22:57,626 maskrcnn_benchmark.trainer INFO: eta: 0:48:05  iter: 940  loss: 1.2354 (3.5731)  loss_classifier: 0.4903 (0.9402)  loss_box_reg: 0.3955 (0.5242)  loss_objectness: 0.2661 (0.8095)  loss_rpn_box_reg: 0.0481 (1.2991)  time: 3.7843 (5.1525)  data: 0.1423 (1.4853)  lr: 0.000000  max mem: 1423
2020-12-07 15:24:13,212 maskrcnn_benchmark.trainer INFO: eta: 0:46:06  iter: 960  loss: 2.6104 (3.6312)  loss_classifier: 0.7033 (0.9404)  loss_box_reg: 0.3403 (0.5236)  loss_objectness: 0.3826 (0.8183)  loss_rpn_box_reg: 0.1418 (1.3489)  time: 3.7770 (5.1239)  data: 0.1337 (1.4572)  lr: 0.000000  max mem: 1423
2020-12-07 15:25:28,841 maskrcnn_benchmark.trainer INFO: eta: 0:44:10  iter: 980  loss: 1.3210 (3.6185)  loss_classifier: 0.4747 (0.9351)  loss_box_reg: 0.3866 (0.5219)  loss_objectness: 0.2869 (0.8156)  loss_rpn_box_reg: 0.0503 (1.3458)  time: 3.7789 (5.0965)  data: 0.1420 (1.4304)  lr: 0.000000  max mem: 1423
2020-12-07 15:26:44,445 maskrcnn_benchmark.trainer INFO: eta: 0:42:15  iter: 1000  loss: 1.6266 (3.6293)  loss_classifier: 0.7368 (0.9344)  loss_box_reg: 0.4812 (0.5222)  loss_objectness: 0.3172 (0.8157)  loss_rpn_box_reg: 0.0394 (1.3571)  time: 3.7800 (5.0702)  data: 0.1445 (1.4047)  lr: 0.000000  max mem: 1423
2020-12-07 15:26:44,447 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 15:26:44,467 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 15:28:58,471 maskrcnn_benchmark.inference INFO: Total run time: 0:02:14.003103 (1.456555470176365 s / img per device, on 1 devices)
2020-12-07 15:28:58,471 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:08.920851 (1.4013135977413342 s / img per device, on 1 devices)
2020-12-07 15:28:58,471 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 15:29:03,547 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 15:29:03,547 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([7.8219e-03, 3.5396e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        8.9786e-03, 0.0000e+00, 3.0683e-03, 1.5787e-03, 1.6647e-01, 0.0000e+00,
        0.0000e+00, 1.5037e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.3572e-04,
        9.1120e-07, 0.0000e+00, 1.9765e-03, 0.0000e+00, 0.0000e+00, 8.3154e-03,
        3.2958e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.7722e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 1.3059e-01, 0.0000e+00, 6.2094e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 9.2377e-02, 0.0000e+00, 0.0000e+00, 2.1441e-02,
        2.0449e-03, 0.0000e+00, 0.0000e+00, 2.0693e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 7.8077e-02, 0.0000e+00, 1.1380e-01, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 5.7982e-02, 0.0000e+00, 3.2837e-02,
        0.0000e+00, 0.0000e+00, 2.6093e-02, 0.0000e+00, 0.0000e+00, 1.3206e-02,
        2.0804e-03, 2.6411e-03, 1.6120e-03, 0.0000e+00, 1.1919e-01, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.0855e-01, 1.7408e-01, 3.4249e-02, 2.1546e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.7949e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        6.0299e-02, 2.4139e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.4777e-02, 0.0000e+00,
        0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 8.,  8.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  6.,  8.,
         8.,  8.,  8.,  6.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,
        -1.,  2.,  8.,  3.,  5.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         6.,  8.,  8., -1.,  8.,  3.,  8., -1.,  3.,  8.,  5.,  8.,  5.,  8.,
         8.,  8., -1.,  6.,  8.,  8.,  8.,  8.,  5.,  8., -1.,  3.,  8.,  3.,
         6.,  8.,  8.,  8.,  8.,  8.,  8., -1., -1., -1.,  8.,  8.,  8.,  8.,
         3.,  3.,  6.,  8.,  8.,  6.,  8.,  3.,  8.,  8.,  2.,  6.,  8.,  3.,
         8.,  6.,  8.,  8.,  8.,  8.,  8.,  3.,  5.,  8., -1.,  3.,  8.,  3.,
         8., -1., -1.]), 'best match scores': tensor([0.9267, 0.9989, 0.9345, 1.0000, 0.9996, 1.0000, 0.9707, 1.0000, 0.0929,
        0.1052, 0.9688, 0.9897, 0.9997, 0.9957, 1.0000, 1.0000, 0.0566, 0.9620,
        1.0000, 1.0000, 0.5341, 1.0000, 1.0000, 1.0000, 0.9997, 0.9679, 0.9991,
        0.5009, 0.0000, 0.9998, 1.0000, 1.0000, 0.0853, 0.4819, 0.9990, 0.8888,
        0.4239, 1.0000, 0.2502, 1.0000, 1.0000, 0.9494, 1.0000, 0.7811, 0.9964,
        0.0000, 0.9649, 0.9852, 0.2949, 0.0000, 0.9825, 1.0000, 0.9502, 0.0887,
        0.2756, 0.0532, 0.1537, 0.3329, 0.0000, 1.0000, 0.5466, 0.1583, 0.9910,
        1.0000, 1.0000, 0.8948, 0.0000, 0.9760, 1.0000, 0.9506, 1.0000, 0.4508,
        0.9855, 0.1160, 0.0681, 0.9999, 0.9996, 0.0000, 0.0000, 0.0000, 0.9957,
        1.0000, 0.9701, 0.9135, 0.2694, 0.3538, 1.0000, 0.6462, 1.0000, 1.0000,
        0.9961, 1.0000, 0.8754, 1.0000, 0.0810, 0.3982, 0.9747, 0.1529, 1.0000,
        1.0000, 0.1592, 0.9989, 1.0000, 0.3752, 0.8028, 0.2008, 1.0000, 0.9989,
        0.0000, 0.1890, 1.0000, 0.7791, 1.0000, 0.0000, 0.0000]), 'num_pos': 115}
2020-12-07 15:29:03,565 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.600000
2020-12-07 15:30:19,217 maskrcnn_benchmark.trainer INFO: eta: 0:41:27  iter: 1020  loss: 0.7057 (3.6107)  loss_classifier: 0.2204 (0.9296)  loss_box_reg: 0.1900 (0.5219)  loss_objectness: 0.2272 (0.8103)  loss_rpn_box_reg: 0.0269 (1.3489)  time: 3.7753 (5.1813)  data: 0.1418 (1.5163)  lr: 0.000000  max mem: 1423
2020-12-07 15:31:35,363 maskrcnn_benchmark.trainer INFO: eta: 0:39:31  iter: 1040  loss: 1.4265 (3.6167)  loss_classifier: 0.6496 (0.9248)  loss_box_reg: 0.3024 (0.5209)  loss_objectness: 0.3341 (0.8097)  loss_rpn_box_reg: 0.0911 (1.3613)  time: 3.7807 (5.1549)  data: 0.1441 (1.4900)  lr: 0.000000  max mem: 1423
2020-12-07 15:32:51,041 maskrcnn_benchmark.trainer INFO: eta: 0:37:36  iter: 1060  loss: 1.4139 (3.6132)  loss_classifier: 0.5762 (0.9212)  loss_box_reg: 0.5163 (0.5219)  loss_objectness: 0.2972 (0.8087)  loss_rpn_box_reg: 0.0583 (1.3615)  time: 3.7839 (5.1290)  data: 0.1398 (1.4645)  lr: 0.000000  max mem: 1423
2020-12-07 15:34:06,668 maskrcnn_benchmark.trainer INFO: eta: 0:35:43  iter: 1080  loss: 0.9363 (3.5928)  loss_classifier: 0.3647 (0.9180)  loss_box_reg: 0.3705 (0.5231)  loss_objectness: 0.2331 (0.8019)  loss_rpn_box_reg: 0.0485 (1.3497)  time: 3.7806 (5.1041)  data: 0.1426 (1.4401)  lr: 0.000000  max mem: 1423
2020-12-07 15:35:22,211 maskrcnn_benchmark.trainer INFO: eta: 0:33:51  iter: 1100  loss: 1.8477 (3.6065)  loss_classifier: 0.7372 (0.9175)  loss_box_reg: 0.3526 (0.5226)  loss_objectness: 0.2671 (0.8013)  loss_rpn_box_reg: 0.0932 (1.3650)  time: 3.7768 (5.0800)  data: 0.1426 (1.4165)  lr: 0.000000  max mem: 1423
2020-12-07 15:35:22,213 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 15:35:22,233 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 15:37:37,028 maskrcnn_benchmark.inference INFO: Total run time: 0:02:14.795609 (1.4651696578316067 s / img per device, on 1 devices)
2020-12-07 15:37:37,029 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:09.755525 (1.410386139931886 s / img per device, on 1 devices)
2020-12-07 15:37:37,029 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 15:37:42,275 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 15:37:42,276 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([7.7425e-03, 3.5396e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.3527e-03,
        5.7850e-02, 0.0000e+00, 0.0000e+00, 1.5787e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.5051e-04, 3.0373e-07, 0.0000e+00, 1.9753e-03, 0.0000e+00, 0.0000e+00,
        1.0391e-02, 9.7319e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.7722e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.2094e-02, 0.0000e+00,
        4.9532e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 4.1423e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.6060e-02, 0.0000e+00, 1.2721e-01, 1.2774e-01, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.2837e-02, 2.5213e-02,
        0.0000e+00, 0.0000e+00, 1.2940e-02, 3.0617e-02, 0.0000e+00, 1.6619e-03,
        1.3850e-03, 0.0000e+00, 1.1919e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 7.3545e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 2.3833e-01, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 9.2377e-02, 1.8168e-02, 0.0000e+00, 0.0000e+00, 2.5327e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 6.1542e-02, 0.0000e+00, 0.0000e+00,
        5.1792e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.4777e-02, 0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 8.,  8.,  3.,  6.,  6.,  8.,  8.,  8.,  6.,  8.,  3.,  3.,  6.,  8.,
         3.,  8.,  8.,  8.,  6.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         6., -1., -1.,  8.,  2.,  3.,  5.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  3.,  6.,  8.,  8.,  5., -1.,  3.,  8.,  5.,  8.,  5.,  8.,  8.,
         8.,  8.,  6.,  8.,  6.,  8.,  8.,  5.,  8.,  8.,  3.,  6.,  8.,  8.,
         8.,  8.,  8.,  8.,  8., -1., -1., -1.,  8.,  8.,  8.,  8.,  3.,  3.,
         6.,  8.,  6.,  8.,  8.,  3.,  8.,  8.,  3.,  6.,  8.,  8.,  6.,  8.,
         8.,  8.,  6.,  3.,  8.,  6.,  8., -1., -1.,  8.,  3.,  8., -1., -1.]), 'best match scores': tensor([0.8209, 1.0000, 1.0000, 1.0000, 0.2271, 1.0000, 0.6988, 1.0000, 0.7754,
        0.0598, 0.9920, 0.5908, 0.9650, 0.9995, 0.1511, 1.0000, 0.9970, 0.6169,
        0.9997, 1.0000, 1.0000, 0.9221, 0.9999, 1.0000, 1.0000, 1.0000, 0.6110,
        0.9701, 0.7825, 0.0000, 0.0000, 0.9999, 1.0000, 1.0000, 0.0623, 0.6732,
        1.0000, 0.9860, 0.3533, 0.9996, 1.0000, 0.7873, 0.9471, 0.9997, 0.9996,
        0.9483, 1.0000, 0.9993, 0.0000, 0.9998, 1.0000, 1.0000, 0.9124, 0.9885,
        1.0000, 0.2580, 0.0527, 0.4089, 0.9896, 0.9306, 0.9998, 0.9949, 0.2092,
        0.9104, 1.0000, 1.0000, 0.9991, 1.0000, 1.0000, 0.8313, 1.0000, 0.9978,
        0.9089, 0.9999, 0.9955, 0.0000, 0.0000, 0.0000, 0.8777, 0.0781, 1.0000,
        0.9992, 1.0000, 0.8333, 0.9989, 1.0000, 1.0000, 0.3054, 0.7348, 0.2006,
        0.1585, 0.7115, 1.0000, 0.8158, 0.9810, 0.6385, 0.9804, 1.0000, 0.9994,
        1.0000, 0.8190, 0.3188, 0.9648, 0.1502, 0.9669, 0.0000, 0.0000, 0.9961,
        0.2241, 0.9914, 0.0000, 0.0000]), 'num_pos': 112}
2020-12-07 15:37:42,296 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.571429
2020-12-07 15:38:58,512 maskrcnn_benchmark.trainer INFO: eta: 0:32:49  iter: 1120  loss: 1.4367 (3.5908)  loss_classifier: 0.5788 (0.9220)  loss_box_reg: 0.4203 (0.5239)  loss_objectness: 0.2194 (0.7956)  loss_rpn_box_reg: 0.0958 (1.3493)  time: 3.7803 (5.1824)  data: 0.1361 (1.5188)  lr: 0.000000  max mem: 1423
2020-12-07 15:40:14,508 maskrcnn_benchmark.trainer INFO: eta: 0:30:56  iter: 1140  loss: 1.1224 (3.5818)  loss_classifier: 0.3604 (0.9227)  loss_box_reg: 0.3981 (0.5229)  loss_objectness: 0.2352 (0.7920)  loss_rpn_box_reg: 0.0330 (1.3442)  time: 3.7845 (5.1581)  data: 0.1392 (1.4946)  lr: 0.000000  max mem: 1423
2020-12-07 15:41:30,603 maskrcnn_benchmark.trainer INFO: eta: 0:29:05  iter: 1160  loss: 2.3979 (3.6078)  loss_classifier: 0.7015 (0.9236)  loss_box_reg: 0.4561 (0.5233)  loss_objectness: 0.3868 (0.7964)  loss_rpn_box_reg: 0.2427 (1.3645)  time: 3.7855 (5.1348)  data: 0.1426 (1.4712)  lr: 0.000000  max mem: 1423
2020-12-07 15:42:46,208 maskrcnn_benchmark.trainer INFO: eta: 0:27:15  iter: 1180  loss: 1.0017 (3.5817)  loss_classifier: 0.3672 (0.9193)  loss_box_reg: 0.3001 (0.5215)  loss_objectness: 0.2149 (0.7890)  loss_rpn_box_reg: 0.0540 (1.3520)  time: 3.7721 (5.1118)  data: 0.1412 (1.4487)  lr: 0.000000  max mem: 1423
2020-12-07 15:44:01,946 maskrcnn_benchmark.trainer INFO: eta: 0:25:26  iter: 1200  loss: 1.4241 (3.5672)  loss_classifier: 0.4150 (0.9180)  loss_box_reg: 0.2992 (0.5192)  loss_objectness: 0.2318 (0.7843)  loss_rpn_box_reg: 0.0720 (1.3457)  time: 3.7784 (5.0897)  data: 0.1403 (1.4269)  lr: 0.000000  max mem: 1423
2020-12-07 15:44:01,948 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 15:44:01,968 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 15:46:16,184 maskrcnn_benchmark.inference INFO: Total run time: 0:02:14.215695 (1.4588662515515867 s / img per device, on 1 devices)
2020-12-07 15:46:16,184 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:09.120035 (1.4034786405770674 s / img per device, on 1 devices)
2020-12-07 15:46:16,185 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 15:46:21,345 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 15:46:21,345 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([2.7198e-02, 7.4190e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.6471e-02,
        1.3214e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.8376e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.5689e-03,
        0.0000e+00, 0.0000e+00, 5.7581e-02, 0.0000e+00, 0.0000e+00, 4.5437e-02,
        7.6317e-03, 3.2815e-03, 0.0000e+00, 7.2095e-02, 7.7722e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 4.9532e-03, 0.0000e+00,
        0.0000e+00, 3.6214e-02, 0.0000e+00, 0.0000e+00, 6.2094e-02, 1.4279e-03,
        4.9532e-03, 0.0000e+00, 1.1873e-01, 0.0000e+00, 0.0000e+00, 6.3048e-02,
        7.5149e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 1.7976e-03, 1.1518e-03, 0.0000e+00,
        0.0000e+00, 2.0741e-02, 0.0000e+00, 3.7467e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.2837e-02, 1.7355e-02, 0.0000e+00, 2.4133e-02, 1.1725e-02,
        0.0000e+00, 1.2940e-02, 3.2071e-04, 9.7068e-04, 1.6619e-03, 0.0000e+00,
        1.1919e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.3032e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 5.5882e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 2.7914e-01, 0.0000e+00, 4.6555e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.5276e-02, 3.1172e-04,
        0.0000e+00, 0.0000e+00, 1.0274e-01, 1.6499e-03, 8.8302e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.6960e-05,
        0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 8.,  8.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  2.,  3.,  6.,  8.,
         8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
        -1., -1.,  8.,  2.,  5.,  6.,  5.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         6.,  8.,  8., -1.,  6.,  8.,  8.,  3.,  6.,  6.,  6.,  6.,  5.,  3.,
         8.,  8.,  8., -1.,  3.,  8.,  8.,  8., -1.,  3.,  6.,  8.,  3.,  8.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8., -1., -1.,  2.,  8.,  8.,
         8.,  8.,  6., -1.,  3.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  2.,  2.,
         2.,  3.,  8.,  8.,  5.,  8.,  8.,  8.,  8., -1., -1.,  6.,  3.,  6.,
         8., -1., -1.,  3.]), 'best match scores': tensor([0.1700, 0.1813, 1.0000, 1.0000, 1.0000, 0.7656, 0.9996, 1.0000, 0.9958,
        0.9948, 0.7235, 0.3697, 1.0000, 0.9876, 1.0000, 1.0000, 0.8856, 0.8537,
        1.0000, 0.9832, 0.7854, 1.0000, 0.9578, 1.0000, 0.0924, 0.9517, 1.0000,
        0.9992, 0.0000, 0.0000, 0.7506, 0.9663, 0.0917, 0.2116, 0.9945, 0.3367,
        0.2337, 0.1192, 0.9865, 0.9977, 1.0000, 1.0000, 1.0000, 0.0736, 1.0000,
        0.0000, 0.8120, 0.9973, 0.0814, 1.0000, 0.9992, 1.0000, 1.0000, 0.9999,
        0.9057, 0.9998, 0.6234, 0.9965, 0.7639, 0.0000, 0.2360, 1.0000, 0.2039,
        0.9088, 0.0000, 0.2653, 0.6211, 1.0000, 0.5268, 0.9996, 1.0000, 0.5693,
        0.9940, 1.0000, 0.9087, 1.0000, 0.9997, 0.1660, 0.9900, 0.0000, 0.0000,
        0.0568, 0.1163, 0.6036, 1.0000, 0.6954, 0.6361, 0.0000, 0.5812, 0.4262,
        1.0000, 0.9884, 0.9526, 0.9531, 0.8406, 1.0000, 0.0613, 1.0000, 0.9997,
        0.1353, 1.0000, 1.0000, 1.0000, 0.9999, 0.6809, 0.9999, 0.3706, 0.0000,
        0.0000, 0.9999, 0.9902, 1.0000, 1.0000, 0.0000, 0.0000, 1.0000]), 'num_pos': 116}
2020-12-07 15:46:21,366 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.577586
2020-12-07 15:47:36,888 maskrcnn_benchmark.trainer INFO: eta: 0:24:11  iter: 1220  loss: 0.9978 (3.5847)  loss_classifier: 0.3440 (0.9096)  loss_box_reg: 0.3365 (0.5169)  loss_objectness: 0.2312 (0.7870)  loss_rpn_box_reg: 0.0272 (1.3712)  time: 3.7762 (5.1825)  data: 0.1397 (1.5201)  lr: 0.000000  max mem: 1423
2020-12-07 15:48:52,537 maskrcnn_benchmark.trainer INFO: eta: 0:22:21  iter: 1240  loss: 1.4666 (3.5987)  loss_classifier: 0.6421 (0.9085)  loss_box_reg: 0.5143 (0.5171)  loss_objectness: 0.2511 (0.7906)  loss_rpn_box_reg: 0.1235 (1.3825)  time: 3.7805 (5.1599)  data: 0.1364 (1.4978)  lr: 0.000000  max mem: 1423
2020-12-07 15:50:08,193 maskrcnn_benchmark.trainer INFO: eta: 0:20:33  iter: 1260  loss: 1.2044 (3.5987)  loss_classifier: 0.4200 (0.9047)  loss_box_reg: 0.4244 (0.5171)  loss_objectness: 0.2454 (0.7900)  loss_rpn_box_reg: 0.0502 (1.3868)  time: 3.7800 (5.1380)  data: 0.1422 (1.4763)  lr: 0.000000  max mem: 1423
2020-12-07 15:51:24,540 maskrcnn_benchmark.trainer INFO: eta: 0:18:45  iter: 1280  loss: 1.0862 (3.5927)  loss_classifier: 0.4692 (0.9021)  loss_box_reg: 0.3503 (0.5157)  loss_objectness: 0.2579 (0.7888)  loss_rpn_box_reg: 0.0327 (1.3861)  time: 3.7847 (5.1174)  data: 0.1381 (1.4554)  lr: 0.000000  max mem: 1423
2020-12-07 15:52:40,578 maskrcnn_benchmark.trainer INFO: eta: 0:16:59  iter: 1300  loss: 1.4969 (3.5787)  loss_classifier: 0.5688 (0.8986)  loss_box_reg: 0.4415 (0.5159)  loss_objectness: 0.2466 (0.7854)  loss_rpn_box_reg: 0.0729 (1.3788)  time: 3.7796 (5.0972)  data: 0.1387 (1.4352)  lr: 0.000000  max mem: 1423
2020-12-07 15:52:40,580 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 15:52:40,601 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 15:54:57,953 maskrcnn_benchmark.inference INFO: Total run time: 0:02:17.352219 (1.4929589007211768 s / img per device, on 1 devices)
2020-12-07 15:54:57,953 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:11.983536 (1.4346036574114924 s / img per device, on 1 devices)
2020-12-07 15:54:57,953 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 15:55:03,279 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 15:55:03,280 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([2.6850e-02, 7.5106e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 1.8032e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 4.2226e-02,
        9.2267e-04, 7.5145e-03, 1.9753e-03, 0.0000e+00, 0.0000e+00, 3.3136e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.4777e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 6.2094e-02, 5.6989e-02, 0.0000e+00, 0.0000e+00,
        9.2377e-02, 6.3048e-02, 2.4383e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.7976e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        7.2831e-02, 3.2837e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.2940e-02, 0.0000e+00, 9.7068e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.1919e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 1.2659e-04, 2.1914e-01, 5.1399e-02,
        9.2377e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.3469e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 3.6214e-02, 2.4139e-04, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8]), 'best match labels': tensor([ 8.,  8.,  3.,  5.,  6.,  3.,  5.,  8.,  8.,  8.,  8.,  3.,  6.,  8.,
         8.,  8.,  8.,  8.,  3.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,
        -1., -1., -1., -1.,  2.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,
         8.,  8.,  8.,  3.,  6.,  6.,  6.,  6.,  5.,  5.,  8.,  8.,  8., -1.,
         6.,  8.,  3.,  6.,  8.,  8.,  3.,  5.,  8.,  6.,  8.,  8.,  8.,  8.,
         8.,  8.,  8., -1.,  8.,  8.,  8., -1.,  3.,  3.,  8.,  3.,  8.,  8.,
         8.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8., -1.,  3.,  6.,
        -1., -1.,  3.]), 'best match scores': tensor([0.9916, 0.0625, 1.0000, 1.0000, 0.3824, 0.9975, 0.2830, 0.9964, 1.0000,
        0.9303, 0.9961, 0.6998, 1.0000, 1.0000, 1.0000, 1.0000, 0.0573, 0.0618,
        1.0000, 0.9517, 0.6505, 0.9100, 0.5479, 1.0000, 0.9997, 1.0000, 0.1035,
        0.4260, 0.0000, 0.0000, 0.0000, 0.0000, 0.9999, 1.0000, 0.9882, 1.0000,
        1.0000, 1.0000, 1.0000, 0.8117, 0.8428, 0.8503, 1.0000, 0.9999, 0.9905,
        0.7169, 0.9219, 0.9992, 0.9825, 0.9922, 0.9224, 0.6070, 0.1863, 1.0000,
        1.0000, 0.0000, 1.0000, 0.5946, 0.1666, 0.9999, 0.3065, 0.9756, 0.3551,
        0.9992, 0.0514, 1.0000, 1.0000, 0.8816, 1.0000, 0.1765, 0.8004, 1.0000,
        0.9898, 0.0000, 1.0000, 0.3343, 0.2253, 0.0000, 0.7226, 0.2514, 0.0831,
        1.0000, 1.0000, 1.0000, 0.3825, 1.0000, 0.2347, 0.2841, 1.0000, 0.9972,
        0.9999, 0.0939, 1.0000, 0.3999, 0.1913, 0.0000, 0.3890, 1.0000, 0.0000,
        0.0000, 0.3457]), 'num_pos': 101}
2020-12-07 15:55:03,298 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.564356
2020-12-07 15:56:20,601 maskrcnn_benchmark.trainer INFO: eta: 0:15:33  iter: 1320  loss: 1.3948 (3.5647)  loss_classifier: 0.5671 (0.9011)  loss_box_reg: 0.6491 (0.5182)  loss_objectness: 0.1876 (0.7800)  loss_rpn_box_reg: 0.0285 (1.3654)  time: 3.8491 (5.1866)  data: 0.1463 (1.5237)  lr: 0.000000  max mem: 1423
2020-12-07 15:57:38,016 maskrcnn_benchmark.trainer INFO: eta: 0:13:46  iter: 1340  loss: 1.1009 (3.5380)  loss_classifier: 0.3888 (0.8974)  loss_box_reg: 0.2935 (0.5155)  loss_objectness: 0.2082 (0.7741)  loss_rpn_box_reg: 0.0428 (1.3511)  time: 3.8681 (5.1670)  data: 0.1418 (1.5031)  lr: 0.000000  max mem: 1423
2020-12-07 15:58:54,641 maskrcnn_benchmark.trainer INFO: eta: 0:12:00  iter: 1360  loss: 1.6135 (3.5245)  loss_classifier: 0.6629 (0.8996)  loss_box_reg: 0.5871 (0.5175)  loss_objectness: 0.1974 (0.7681)  loss_rpn_box_reg: 0.0638 (1.3393)  time: 3.7813 (5.1473)  data: 0.1435 (1.4832)  lr: 0.000000  max mem: 1423
2020-12-07 16:00:10,324 maskrcnn_benchmark.trainer INFO: eta: 0:10:15  iter: 1380  loss: 0.9397 (3.5174)  loss_classifier: 0.3847 (0.8952)  loss_box_reg: 0.3189 (0.5170)  loss_objectness: 0.1717 (0.7651)  loss_rpn_box_reg: 0.0285 (1.3401)  time: 3.7831 (5.1276)  data: 0.1417 (1.4637)  lr: 0.000000  max mem: 1423
2020-12-07 16:01:25,942 maskrcnn_benchmark.trainer INFO: eta: 0:08:30  iter: 1400  loss: 1.5225 (3.4939)  loss_classifier: 0.5590 (0.8947)  loss_box_reg: 0.4628 (0.5182)  loss_objectness: 0.1875 (0.7583)  loss_rpn_box_reg: 0.0319 (1.3226)  time: 3.7791 (5.1083)  data: 0.1409 (1.4448)  lr: 0.000000  max mem: 1423
2020-12-07 16:01:25,944 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 16:01:25,964 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 16:03:41,560 maskrcnn_benchmark.inference INFO: Total run time: 0:02:15.596512 (1.4738751287045686 s / img per device, on 1 devices)
2020-12-07 16:03:41,561 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:10.348616 (1.4168327787648076 s / img per device, on 1 devices)
2020-12-07 16:03:41,561 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 16:03:46,803 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 16:03:46,803 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.8261e-03,
        5.8146e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.3540e-05, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.3564e-03,
        0.0000e+00, 3.2631e-02, 1.9753e-03, 0.0000e+00, 0.0000e+00, 4.3074e-02,
        7.8538e-03, 7.4161e-05, 0.0000e+00, 4.8304e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.4777e-02, 4.9532e-03,
        0.0000e+00, 6.2094e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.1560e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.7976e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 9.9020e-02, 0.0000e+00, 1.1023e-02, 1.3178e-04,
        3.2837e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.5137e-02,
        2.0804e-03, 7.6768e-04, 2.6660e-01, 0.0000e+00, 1.1919e-01, 6.6586e-02,
        0.0000e+00, 0.0000e+00, 7.9132e-02, 0.0000e+00, 0.0000e+00, 6.0927e-04,
        1.7408e-01, 6.3981e-02, 4.1017e-02, 9.2377e-02, 1.4935e-02, 0.0000e+00,
        0.0000e+00, 2.3469e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.6214e-02,
        2.4139e-04, 9.6661e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([-1.,  3.,  3.,  5.,  8.,  8.,  8.,  8.,  6.,  2.,  3.,  6.,  3.,  8.,
         8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  2.,  8.,  8.,
        -1., -1., -1.,  2.,  5.,  6.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,  5.,
         8.,  8., -1.,  3.,  6.,  6.,  6.,  8.,  5.,  6.,  8., -1., -1.,  3.,
         8.,  3.,  8.,  8.,  8., -1.,  5.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,
         8.,  8., -1.,  8.,  8.,  8.,  6.,  3.,  8.,  8.,  8.,  8.,  2.,  3.,
         8.,  8.,  5.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,  8.]), 'best match scores': tensor([0.0000, 1.0000, 0.1861, 1.0000, 0.2378, 0.9990, 0.8442, 0.8782, 1.0000,
        1.0000, 0.9982, 1.0000, 0.8685, 1.0000, 1.0000, 0.9930, 0.9999, 0.9999,
        1.0000, 0.6940, 1.0000, 0.8690, 0.4056, 1.0000, 1.0000, 0.1276, 0.5089,
        0.5439, 0.0000, 0.0000, 0.0000, 0.3344, 0.3464, 1.0000, 1.0000, 0.8720,
        0.9997, 1.0000, 0.3387, 0.9602, 0.9964, 0.9997, 0.9890, 0.7969, 0.0000,
        0.9679, 0.9979, 0.0791, 0.9053, 0.3693, 0.5480, 0.9961, 1.0000, 0.0000,
        0.0000, 0.9925, 0.1622, 0.9926, 0.8087, 0.1359, 0.9972, 0.0000, 0.9989,
        1.0000, 1.0000, 1.0000, 0.1240, 1.0000, 0.9249, 0.5396, 0.8811, 0.1736,
        0.0000, 1.0000, 0.1722, 0.6172, 0.6767, 0.8470, 1.0000, 0.3714, 1.0000,
        0.1180, 0.9999, 0.9771, 0.8314, 1.0000, 1.0000, 1.0000, 0.9825, 0.7755,
        0.2124, 0.3971, 1.0000, 0.0878, 0.9547]), 'num_pos': 95}
2020-12-07 16:03:46,821 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.578947
2020-12-07 16:05:02,718 maskrcnn_benchmark.trainer INFO: eta: 0:06:55  iter: 1420  loss: 1.1765 (3.4873)  loss_classifier: 0.5111 (0.8893)  loss_box_reg: 0.5095 (0.5180)  loss_objectness: 0.1539 (0.7559)  loss_rpn_box_reg: 0.0535 (1.3241)  time: 3.7825 (5.1891)  data: 0.1413 (1.5257)  lr: 0.000000  max mem: 1423
2020-12-07 16:06:18,475 maskrcnn_benchmark.trainer INFO: eta: 0:05:10  iter: 1440  loss: 1.2029 (3.4661)  loss_classifier: 0.5094 (0.8910)  loss_box_reg: 0.4130 (0.5179)  loss_objectness: 0.2034 (0.7493)  loss_rpn_box_reg: 0.0522 (1.3079)  time: 3.7794 (5.1696)  data: 0.1429 (1.5065)  lr: 0.000000  max mem: 1423
2020-12-07 16:07:34,502 maskrcnn_benchmark.trainer INFO: eta: 0:03:26  iter: 1460  loss: 1.5654 (3.4754)  loss_classifier: 0.6576 (0.8944)  loss_box_reg: 0.5755 (0.5181)  loss_objectness: 0.2809 (0.7507)  loss_rpn_box_reg: 0.1086 (1.3122)  time: 3.7845 (5.1508)  data: 0.1398 (1.4878)  lr: 0.000000  max mem: 1423
2020-12-07 16:08:53,591 maskrcnn_benchmark.trainer INFO: eta: 0:01:42  iter: 1480  loss: 1.2448 (3.4490)  loss_classifier: 0.5859 (0.8922)  loss_box_reg: 0.4383 (0.5173)  loss_objectness: 0.1826 (0.7438)  loss_rpn_box_reg: 0.0276 (1.2957)  time: 3.9420 (5.1347)  data: 0.1433 (1.4696)  lr: 0.000000  max mem: 1423
2020-12-07 16:10:12,906 maskrcnn_benchmark.trainer INFO: eta: 0:00:00  iter: 1500  loss: 1.7853 (3.4795)  loss_classifier: 0.7360 (0.8922)  loss_box_reg: 0.3751 (0.5175)  loss_objectness: 0.4744 (0.7496)  loss_rpn_box_reg: 0.1030 (1.3202)  time: 3.9636 (5.1191)  data: 0.1451 (1.4520)  lr: 0.000000  max mem: 1423
2020-12-07 16:10:12,908 maskrcnn_benchmark.trainer INFO: validation circle
2020-12-07 16:10:12,930 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_valid dataset(92 images).
2020-12-07 16:12:30,021 maskrcnn_benchmark.inference INFO: Total run time: 0:02:17.090690 (1.4901161997214607 s / img per device, on 1 devices)
2020-12-07 16:12:30,021 maskrcnn_benchmark.inference INFO: Model inference time: 0:02:11.526673 (1.4296377482621565 s / img per device, on 1 devices)
2020-12-07 16:12:30,021 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 16:12:35,401 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 16:12:35,401 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([4.6972e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.0809e-03, 0.0000e+00, 4.0791e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.0431e-03, 0.0000e+00, 7.3006e-02, 1.9779e-03, 0.0000e+00, 0.0000e+00,
        8.3154e-03, 3.6611e-03, 1.0876e-04, 0.0000e+00, 0.0000e+00, 7.7722e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.0878e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 6.2094e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 5.4897e-02, 9.5325e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.7976e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 3.2837e-02, 0.0000e+00, 0.0000e+00,
        4.5259e-02, 0.0000e+00, 0.0000e+00, 1.2940e-02, 1.6997e-04, 8.0527e-04,
        7.6842e-02, 0.0000e+00, 1.2859e-01, 2.1645e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 8.9427e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.1531e-01,
        6.2402e-06, 1.6267e-01, 0.0000e+00, 0.0000e+00, 8.3896e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.3469e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        6.6617e-02, 2.4139e-04, 8.3650e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 5.6960e-05, 0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 8., -1.,  3.,  6.,  8.,  3.,  8.,  8.,  8.,  8.,  2.,  3.,  3.,  8.,
         8.,  8.,  8.,  5.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  2.,  8.,
         6., -1., -1.,  8., -1.,  2.,  5.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,
         8., -1.,  6.,  8.,  8.,  6.,  8.,  6.,  6.,  6.,  5.,  8.,  3.,  8.,
         8., -1.,  6.,  8.,  6.,  8.,  5.,  8., -1.,  8.,  8.,  2.,  6.,  8.,
         8.,  8.,  8.,  8.,  8.,  8., -1.,  8.,  6., -1.,  3.,  3.,  8.,  8.,
         3.,  8.,  8.,  8.,  8.,  3.,  6.,  3.,  8.,  5.,  8.,  8.,  8.,  8.,
         8., -1., -1.,  6., -1., -1.,  6., -1., -1.,  3.]), 'best match scores': tensor([0.9999, 0.0000, 1.0000, 0.2534, 0.2893, 0.9587, 0.9992, 1.0000, 0.9977,
        0.9996, 0.9998, 0.9330, 0.3782, 0.8671, 0.9990, 1.0000, 0.6910, 0.7793,
        1.0000, 0.9983, 0.8166, 0.1662, 1.0000, 0.2178, 1.0000, 0.8336, 0.2255,
        1.0000, 0.7631, 0.0000, 0.0000, 0.2492, 0.0000, 0.9997, 0.4658, 0.0637,
        1.0000, 0.9997, 1.0000, 0.9840, 0.9993, 0.3871, 0.9614, 0.0000, 0.9989,
        1.0000, 0.9999, 0.9802, 0.9986, 0.9529, 1.0000, 0.9999, 0.9999, 0.9999,
        0.9998, 1.0000, 1.0000, 0.0000, 1.0000, 0.3415, 0.7038, 0.4428, 1.0000,
        1.0000, 0.0000, 1.0000, 1.0000, 0.3295, 1.0000, 0.7195, 0.9821, 1.0000,
        0.0631, 0.9945, 1.0000, 0.9033, 0.0000, 1.0000, 0.9827, 0.0000, 1.0000,
        0.9365, 0.1312, 0.0538, 1.0000, 0.9996, 0.1390, 1.0000, 0.9452, 1.0000,
        0.2549, 0.4762, 1.0000, 0.9559, 1.0000, 1.0000, 0.4337, 0.2604, 0.9825,
        0.0000, 0.0000, 0.6816, 0.0000, 0.0000, 0.7245, 0.0000, 0.0000, 0.0991]), 'num_pos': 108}
2020-12-07 16:12:35,420 maskrcnn_benchmark.trainer INFO: validation accuracy: 0.527778
2020-12-07 16:12:35,425 maskrcnn_benchmark.utils.checkpoint INFO: Saving checkpoint to ./final_mode_r2.pth
2020-12-07 16:12:36,026 maskrcnn_benchmark.trainer INFO: final model, saving model to: final_mode_r2
2020-12-07 16:12:36,036 maskrcnn_benchmark.trainer INFO: Total training time: 2:10:21.774350 (5.2145 s / it)
2020-12-07 16:12:48,731 maskrcnn_benchmark.inference INFO: Start evaluation on giro1_test dataset(140 images).
2020-12-07 16:16:17,310 maskrcnn_benchmark.inference INFO: Total run time: 0:03:28.578046 (1.4898431846073696 s / img per device, on 1 devices)
2020-12-07 16:16:17,310 maskrcnn_benchmark.inference INFO: Model inference time: 0:03:19.201674 (1.4228690998894828 s / img per device, on 1 devices)
2020-12-07 16:16:17,344 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 16:16:25,423 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 16:16:25,423 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.7841e-02, 3.4309e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.1550e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.3589e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.7152e-04, 2.1064e-05, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.7210e-02, 4.0342e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.1633e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 8.1617e-02, 0.0000e+00, 0.0000e+00, 1.8319e-04, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.8221e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.5169e-03, 0.0000e+00, 0.0000e+00, 9.9961e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 6.1918e-02, 2.3520e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 4.0703e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        3.0950e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 7.7068e-02, 5.2027e-02, 1.9076e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 3.8555e-03, 6.2794e-05, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 4.4006e-03, 0.0000e+00, 0.0000e+00, 4.4930e-02, 3.3471e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 2.2087e-03, 4.9433e-06, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.5695e-03,
        0.0000e+00, 0.0000e+00, 3.2460e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 4.0342e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 7.2941e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 3.0262e-02, 4.0342e-03, 0.0000e+00, 0.0000e+00,
        3.6216e-03, 9.9006e-04, 1.6333e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.6216e-03,
        1.4403e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.9941e-01,
        2.0507e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.3417e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.2479e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.3389e-03,
        3.2056e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.3411e-03, 1.9815e-04,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        9.5600e-02, 6.4282e-02, 3.1186e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.3055e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.8462e-01,
        2.7584e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.6394e-03, 1.0876e-05,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.0052e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 3.2609e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.1393e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.1080e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.5182e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.1904e-03,
        1.8095e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00]), 'gt_labels': tensor([7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 5, 5, 7, 7, 4, 7, 7, 7,
        7, 4, 7, 7, 8, 8, 8, 7, 7, 4, 7, 7, 4, 7, 7, 8, 8, 8, 7, 7, 8, 8, 7, 7,
        5, 5, 7, 7, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7,
        7, 4, 7, 7, 4, 7, 7, 7, 7, 4, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 4, 7, 7,
        4, 7, 7, 4, 7, 7, 8, 8, 8, 8, 8, 8, 5, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 5,
        7, 7, 5, 5, 7, 7, 5, 5, 7, 7, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 4, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 4, 7, 7, 7, 7, 4, 7, 7, 4, 7, 7, 4, 7, 7,
        7, 7, 8, 8, 7, 7, 4, 7, 7, 8, 8, 8, 8, 5, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8,
        8, 7, 7, 4, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 7, 7, 8, 7, 7, 4, 8, 7, 7, 8,
        8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 7, 7, 4, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8,
        8, 5, 7, 7, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8,
        8, 8, 8, 8, 7, 7, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 7, 7, 5, 5, 7, 7, 8, 8, 8, 8, 7, 7, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7,
        7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 5, 7,
        7, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 7,
        7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 5, 5, 7, 7, 8, 8, 8, 8, 8, 5, 8, 7, 7,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 7, 7, 5, 5, 7, 7, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8,
        8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([-1., -1., -1., -1., -1., -1., -1., -1., -1.,  6., -1., -1., -1., -1.,
        -1., -1., -1., -1.,  8., -1., -1., -1., -1., -1., -1., -1., -1.,  8.,
        -1., -1., -1., -1.,  2., -1.,  8., -1., -1.,  6., -1., -1.,  3.,  8.,
        -1.,  8.,  8., -1.,  6., -1., -1.,  8., -1., -1.,  8.,  6.,  8., -1.,
        -1.,  2., -1., -1.,  6.,  5.,  6.,  8.,  3.,  8., -1., -1.,  8.,  8.,
        -1.,  6.,  8.,  8., -1., -1.,  2., -1., -1., -1., -1.,  3.,  3.,  3.,
         3.,  3., -1., -1., -1., -1., -1., -1.,  2.,  2.,  3., -1., -1.,  8.,
        -1., -1.,  2.,  6.,  8., -1., -1.,  8., -1., -1., -1., -1.,  2.,  2.,
         6.,  8.,  8.,  8.,  8., -1., -1., -1., -1., -1., -1., -1., -1.,  3.,
        -1., -1., -1.,  8., -1., -1., -1., -1., -1., -1., -1., -1.,  8., -1.,
        -1.,  8.,  2.,  8.,  2., -1.,  2.,  3., -1., -1., -1., -1., -1., -1.,
        -1., -1.,  3., -1., -1.,  8., -1., -1.,  8., -1., -1., -1., -1.,  3.,
        -1.,  6.,  8.,  8., -1.,  3.,  6.,  8., -1., -1.,  6., -1., -1., -1.,
        -1., -1., -1.,  3.,  8.,  8., -1., -1.,  6., -1., -1., -1., -1., -1.,
        -1., -1., -1.,  8., -1.,  2.,  6.,  8.,  8., -1., -1.,  8., -1., -1.,
         2., -1., -1.,  8.,  8.,  8., -1., -1., -1.,  8., -1.,  2.,  2., -1.,
        -1.,  8.,  8.,  6.,  8.,  2., -1., -1.,  2.,  2.,  2.,  3.,  6.,  8.,
         8.,  8.,  8., -1.,  8.,  8.,  8., -1., -1., -1., -1.,  8., -1.,  3.,
         5.,  6.,  8., -1., -1., -1., -1., -1., -1., -1.,  8.,  8., -1., -1.,
        -1., -1., -1., -1., -1.,  3.,  8., -1.,  5.,  8.,  3.,  6., -1.,  2.,
         6., -1., -1.,  8., -1., -1., -1.,  8., -1., -1., -1., -1., -1., -1.,
        -1., -1., -1., -1.,  8., -1., -1.,  8.,  6., -1., -1., -1., -1., -1.,
        -1., -1., -1., -1., -1.,  8., -1.,  6.,  8.,  8.,  8., -1., -1., -1.,
         6.,  8.,  8.,  8.,  8.,  8.,  8.,  8., -1., -1., -1., -1., -1.,  8.,
        -1., -1., -1.,  2., -1., -1.,  8., -1., -1., -1., -1., -1., -1., -1.,
         3.,  8., -1., -1., -1., -1.,  3.,  3.,  8.,  8.,  8., -1., -1., -1.,
         6., -1.,  2.,  8.,  8.,  3.,  5., -1., -1.,  6., -1., -1., -1., -1.,
        -1., -1., -1., -1.,  2.,  6.,  8., -1., -1., -1., -1., -1., -1., -1.,
        -1.,  8., -1., -1.,  8., -1., -1., -1., -1., -1., -1., -1., -1.,  8.,
        -1., -1., -1., -1., -1., -1.,  8., -1., -1., -1.,  8.,  3.,  8.,  6.,
         8.,  8.,  8.,  8., -1., -1., -1., -1.,  8.,  8., -1., -1.,  5.,  5.,
         6., -1., -1., -1., -1., -1., -1., -1., -1.,  2., -1., -1., -1., -1.,
         8.,  8., -1.,  3.,  3.,  6.,  8., -1., -1.,  6., -1., -1., -1., -1.,
        -1.,  8., -1., -1.,  8., -1., -1., -1., -1., -1.,  8., -1., -1., -1.,
        -1.,  8.,  3., -1., -1., -1., -1., -1.,  8., -1., -1., -1., -1., -1.,
        -1.,  6.,  8., -1., -1., -1.,  8., -1., -1., -1., -1., -1., -1., -1.,
         8., -1., -1., -1., -1.,  2.,  8.,  8., -1., -1., -1., -1., -1., -1.,
        -1.,  3.,  8.,  8., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.,
         8.,  8.,  6.,  8.,  2.,  8., -1., -1., -1., -1., -1., -1., -1.,  8.,
         8.,  8., -1., -1., -1., -1., -1., -1.,  3.,  6.,  8.,  8.,  8.,  8.,
        -1., -1., -1., -1.,  8.,  8.,  8.,  8.,  8.,  8., -1., -1.,  8., -1.,
        -1., -1., -1.,  3.,  6.,  8., -1., -1., -1., -1., -1., -1., -1., -1.,
         8.]), 'best match scores': tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0559, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.9998, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.2186, 0.0000, 0.0000, 0.0000, 0.0000, 0.9352, 0.0000, 0.9990, 0.0000,
        0.0000, 0.9997, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.9987, 0.0874,
        0.0000, 1.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.3704, 0.0844,
        0.9999, 0.0000, 0.0000, 0.9359, 0.0000, 0.0000, 1.0000, 0.0569, 0.1309,
        0.9994, 0.9999, 1.0000, 0.0000, 0.0000, 0.9895, 0.2089, 0.0000, 1.0000,
        0.9973, 1.0000, 0.0000, 0.0000, 0.6840, 0.0000, 0.0000, 0.0000, 0.0000,
        0.9996, 0.9937, 0.4259, 1.0000, 0.7590, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0942, 0.9289, 0.2430, 0.0000, 0.0000, 0.9999, 0.0000,
        0.0000, 0.7304, 1.0000, 1.0000, 0.0000, 0.0000, 0.9999, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0744, 0.9788, 1.0000, 1.0000, 1.0000, 0.9903, 1.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.6962,
        0.0000, 0.0000, 0.0000, 0.1109, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0514, 0.1367, 1.0000,
        1.0000, 0.0000, 0.3881, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.9808, 0.0000, 0.0000, 0.7918, 0.0000, 0.0000,
        0.9999, 0.0000, 0.0000, 0.0000, 0.0000, 0.2437, 0.0000, 0.9941, 1.0000,
        0.2558, 0.0000, 0.0578, 0.9022, 0.2359, 0.0000, 0.0000, 1.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.3237, 1.0000, 1.0000, 0.0000,
        0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0870, 0.0000, 1.0000, 1.0000, 0.1267, 1.0000, 0.0000, 0.0000,
        0.9059, 0.0000, 0.0000, 0.4158, 0.0000, 0.0000, 0.9855, 1.0000, 0.0573,
        0.0000, 0.0000, 0.0000, 0.2490, 0.0000, 0.9999, 0.9194, 0.0000, 0.0000,
        0.9997, 0.9997, 0.5462, 0.8917, 1.0000, 0.0000, 0.0000, 1.0000, 0.9989,
        0.9955, 1.0000, 1.0000, 1.0000, 0.9946, 0.9501, 1.0000, 0.0000, 0.7217,
        0.7403, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.8253, 0.0000, 0.9867,
        0.1142, 1.0000, 0.5421, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.6566, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.9698, 0.8156, 0.0000, 0.8647, 1.0000, 0.0873, 0.0543, 0.0000,
        0.9867, 0.9999, 0.0000, 0.0000, 0.2064, 0.0000, 0.0000, 0.0000, 0.9995,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 1.0000, 0.0000, 0.0000, 0.0719, 1.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000,
        0.1175, 0.9820, 0.8782, 0.9872, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000,
        1.0000, 1.0000, 0.9993, 0.0631, 0.9021, 0.2548, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.9998, 0.0000, 0.0000, 0.0000, 0.6978, 0.0000, 0.0000,
        0.9916, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9828,
        1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9435, 0.9773, 0.9997, 0.0526,
        1.0000, 0.0000, 0.0000, 0.0000, 0.5916, 0.0000, 0.9999, 1.0000, 0.8036,
        1.0000, 0.9981, 0.0000, 0.0000, 0.9137, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.2254, 1.0000, 0.8996, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1289, 0.0000, 0.0000,
        0.7742, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.9592, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1368, 0.0000,
        0.0000, 0.0000, 1.0000, 0.8256, 1.0000, 1.0000, 0.9953, 0.9992, 1.0000,
        0.9562, 0.0000, 0.0000, 0.0000, 0.0000, 0.8611, 1.0000, 0.0000, 0.0000,
        0.9634, 0.7297, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.1725, 0.0000, 0.0000, 0.0000, 0.0000, 0.7267, 0.9961,
        0.0000, 0.5446, 0.9982, 0.7857, 0.5149, 0.0000, 0.0000, 0.5703, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.1781, 0.0000, 0.0000, 1.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.9745, 0.0000, 0.0000, 0.0000, 0.0000,
        0.8837, 0.1419, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9259, 0.9023, 0.0000, 0.0000,
        0.0000, 0.6292, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.9999, 0.0000, 0.0000, 0.0000, 0.0000, 0.9999, 0.6433, 0.9946, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9839, 0.0532, 1.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.9637, 1.0000, 0.0501, 0.3726, 1.0000, 1.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 1.0000,
        1.0000, 0.9488, 0.0000, 0.0000, 0.0000, 0.0000, 0.7451, 0.8931, 0.9996,
        0.9176, 0.9235, 0.1932, 0.0000, 0.0000, 0.7418, 0.0000, 0.0000, 0.0000,
        0.0000, 0.9981, 1.0000, 0.9975, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 1.0000]), 'num_pos': 589}
2020-12-07 16:16:25,486 maskrcnn_benchmark.inference INFO: Start evaluation on giro4_test dataset(243 images).
2020-12-07 16:22:25,502 maskrcnn_benchmark.inference INFO: Total run time: 0:06:00.016109 (1.4815477746013752 s / img per device, on 1 devices)
2020-12-07 16:22:25,502 maskrcnn_benchmark.inference INFO: Model inference time: 0:05:43.997540 (1.4156277385758764 s / img per device, on 1 devices)
2020-12-07 16:22:25,531 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 16:22:39,090 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 16:22:39,090 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([0.0000e+00, 7.9090e-02, 4.2205e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.1969e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 8.4288e-02, 0.0000e+00, 2.0490e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 7.6068e-02, 0.0000e+00, 1.7043e-02, 0.0000e+00,
        1.2269e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.2081e-02,
        0.0000e+00, 5.2437e-02, 1.6303e-03, 0.0000e+00, 5.2853e-02, 0.0000e+00,
        2.8900e-01, 6.5872e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 8.4669e-02, 1.6375e-01, 1.2052e-01, 0.0000e+00, 0.0000e+00,
        8.3165e-02, 1.2077e-03, 1.2389e-01, 8.5239e-02, 0.0000e+00, 0.0000e+00,
        3.4537e-02, 0.0000e+00, 0.0000e+00, 3.6214e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 7.3888e-03, 0.0000e+00, 0.0000e+00, 4.9109e-02, 1.9753e-03,
        0.0000e+00, 0.0000e+00, 1.0323e-01, 1.2148e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 2.5118e-02, 5.4893e-05, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.4808e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0490e-02, 0.0000e+00, 0.0000e+00,
        1.1463e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.1495e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 4.7991e-06, 4.3011e-03, 0.0000e+00, 5.2660e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 9.4800e-02, 4.2205e-03, 0.0000e+00,
        3.3880e-02, 0.0000e+00, 7.7361e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.4285e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 6.0962e-02, 4.1073e-02,
        0.0000e+00, 1.6365e-01, 0.0000e+00, 1.4777e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.6806e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 2.9786e-02, 1.8620e-04, 0.0000e+00, 1.0723e-02, 7.6660e-04,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 4.9532e-03, 0.0000e+00,
        8.2459e-02, 0.0000e+00, 0.0000e+00, 1.4734e-02, 4.6759e-04, 1.1562e-01,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 2.2279e-02, 0.0000e+00, 0.0000e+00, 1.9620e-02, 0.0000e+00,
        0.0000e+00, 1.4857e-03, 2.0039e-02, 1.5811e-02, 5.4221e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 9.5383e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 5.7220e-02, 3.3198e-02, 1.6422e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 6.9003e-03, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 4.6250e-02, 0.0000e+00, 2.6721e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 4.0999e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.2831e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.7056e-02, 0.0000e+00,
        0.0000e+00, 3.7615e-01, 1.9753e-03, 0.0000e+00, 3.3397e-02, 0.0000e+00,
        1.8197e-03, 6.9299e-03, 1.1099e-01, 8.8594e-03, 0.0000e+00, 0.0000e+00,
        1.4216e-03, 0.0000e+00, 7.7936e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 3.2980e-02, 2.8063e-01, 0.0000e+00,
        0.0000e+00, 4.9672e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 4.9548e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.6650e-03, 0.0000e+00, 4.5460e-04, 2.8780e-02, 3.2985e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00]), 'gt_labels': tensor([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
        8, 8, 8, 8, 8, 8, 8, 8, 8]), 'best match labels': tensor([ 6.,  8.,  8.,  2.,  6.,  6.,  8.,  8.,  8.,  8.,  8.,  6.,  5.,  8.,
         8.,  8.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,  3.,
         3.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,  8.,  8.,
         3.,  8.,  8.,  8.,  3.,  6.,  8.,  8.,  3.,  8.,  3.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         5.,  8.,  8.,  8.,  6.,  8.,  3.,  8., -1.,  6.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  8.,  8.,  3.,  8., -1.,  5.,  8., -1., -1.,  8.,
         3.,  8.,  8.,  8., -1.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,
         8.,  8.,  8.,  8.,  3.,  5.,  8.,  8.,  3.,  8.,  3.,  8., -1., -1.,
         8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  6.,  3.,
         8.,  6.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,
        -1., -1.,  3.,  8.,  8.,  8.,  8.,  8.,  3.,  5.,  8.,  8.,  8.,  8.,
         3.,  8.,  8., -1.,  8.,  8.,  6.,  3.,  3.,  8.,  8.,  8.,  3.,  8.,
         2.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,  3.,  8., -1.,
         3.,  8.,  8.,  2.,  8.,  3.,  8.,  6.,  3.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  8., -1.,  2.,  3.,  8.,  3.,  8.,  8., -1., -1.,  8.,  6.,
         5.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,  3.,  8.,  8.,  8.,
         8.,  6.,  8.,  8.,  3.,  8.,  8.,  8., -1., -1.,  8.]), 'best match scores': tensor([0.9938, 1.0000, 0.9999, 0.3053, 1.0000, 1.0000, 0.9992, 0.9999, 1.0000,
        0.2131, 1.0000, 1.0000, 0.9988, 1.0000, 1.0000, 0.9972, 0.9861, 1.0000,
        1.0000, 0.4071, 0.4214, 0.9983, 1.0000, 0.9999, 1.0000, 0.5687, 0.9985,
        0.2150, 0.7314, 1.0000, 1.0000, 1.0000, 0.9049, 1.0000, 1.0000, 1.0000,
        0.9999, 0.9967, 0.9985, 1.0000, 1.0000, 0.4008, 0.9968, 1.0000, 1.0000,
        0.9029, 0.8313, 0.9690, 1.0000, 0.9906, 0.5755, 0.8933, 0.8916, 0.8247,
        1.0000, 1.0000, 0.3019, 0.0529, 0.9993, 0.1555, 1.0000, 1.0000, 0.9997,
        0.9997, 0.9964, 0.9967, 0.9875, 0.9998, 0.9734, 0.4268, 1.0000, 0.0514,
        0.9927, 0.9918, 1.0000, 0.1158, 0.0558, 0.0684, 0.0000, 1.0000, 0.3831,
        1.0000, 0.9986, 0.0587, 0.5687, 0.9998, 1.0000, 0.2933, 1.0000, 1.0000,
        0.9946, 0.0577, 0.0000, 1.0000, 0.9969, 0.0000, 0.0000, 0.9924, 1.0000,
        0.9816, 0.1305, 1.0000, 0.0000, 1.0000, 0.7433, 0.9972, 0.8808, 0.9990,
        0.9646, 1.0000, 0.3841, 0.9716, 0.9985, 1.0000, 0.8135, 0.9071, 0.9921,
        1.0000, 0.9954, 0.5977, 1.0000, 0.9328, 0.9953, 0.3590, 0.0000, 0.0000,
        0.9896, 0.8296, 1.0000, 0.6948, 0.9122, 0.9999, 0.0771, 0.9984, 0.9340,
        0.9994, 0.7168, 0.7326, 1.0000, 0.0618, 0.9645, 1.0000, 1.0000, 0.1100,
        0.9957, 0.9997, 1.0000, 0.1003, 1.0000, 1.0000, 0.7998, 1.0000, 0.9807,
        1.0000, 0.0000, 0.0000, 0.9729, 0.9710, 0.9913, 1.0000, 1.0000, 1.0000,
        1.0000, 0.8336, 0.9590, 0.9983, 1.0000, 1.0000, 0.8522, 0.9942, 0.4075,
        0.0000, 0.3015, 0.9496, 0.9870, 0.1301, 0.9442, 0.5581, 0.8856, 0.9992,
        0.3247, 1.0000, 0.0884, 0.0512, 0.9993, 0.0648, 0.9990, 0.2026, 1.0000,
        0.5591, 0.0518, 0.9998, 0.6167, 0.4885, 0.5475, 0.0000, 0.9436, 0.2311,
        0.1030, 1.0000, 0.9985, 1.0000, 0.8918, 0.8996, 0.9948, 1.0000, 0.1012,
        1.0000, 0.9999, 0.1482, 0.9921, 0.0586, 0.9994, 0.0000, 1.0000, 0.8754,
        1.0000, 0.0928, 0.9897, 0.9881, 0.0000, 0.0000, 1.0000, 1.0000, 0.1119,
        0.9362, 0.9552, 0.5901, 0.9840, 0.6169, 0.9574, 1.0000, 1.0000, 0.9999,
        0.8580, 0.2262, 1.0000, 1.0000, 0.9774, 1.0000, 0.9999, 1.0000, 0.8858,
        0.3269, 0.8918, 0.9842, 0.0000, 0.0000, 1.0000]), 'num_pos': 249}
2020-12-07 16:22:39,130 maskrcnn_benchmark.inference INFO: Start evaluation on giro8_test dataset(8 images).
2020-12-07 16:22:50,884 maskrcnn_benchmark.inference INFO: Total run time: 0:00:11.754254 (1.469281792640686 s / img per device, on 1 devices)
2020-12-07 16:22:50,884 maskrcnn_benchmark.inference INFO: Model inference time: 0:00:11.223729 (1.4029660820960999 s / img per device, on 1 devices)
2020-12-07 16:22:50,886 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 16:22:51,333 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 16:22:51,333 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([0.0111, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0287, 0.0113, 0.0085, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0064, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1069, 0.1993, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000]), 'gt_labels': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 'best match labels': tensor([-1., -1., -1., -1., -1., -1.,  6.,  8.,  8., -1., -1.,  6.,  8.,  8.,
         8.,  8.,  8.,  8., -1., -1., -1., -1., -1., -1.,  6., -1., -1., -1.,
        -1.,  6.,  6.,  8.,  8.,  8., -1., -1., -1., -1., -1., -1.,  3.]), 'best match scores': tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.9996,
        0.0000, 0.0000, 1.0000, 1.0000, 1.0000, 0.9538, 0.5233, 0.8499, 0.3238,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2656, 0.0000, 0.0000,
        0.0000, 0.0000, 0.9700, 1.0000, 1.0000, 1.0000, 0.9973, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0817]), 'num_pos': 41}
2020-12-07 16:22:51,341 maskrcnn_benchmark.inference INFO: Start evaluation on giro9_test dataset(696 images).
2020-12-07 16:40:34,935 maskrcnn_benchmark.inference INFO: Total run time: 0:17:43.594210 (1.5281526007871518 s / img per device, on 1 devices)
2020-12-07 16:40:34,936 maskrcnn_benchmark.inference INFO: Model inference time: 0:16:49.132715 (1.4499033254453506 s / img per device, on 1 devices)
2020-12-07 16:40:35,039 maskrcnn_benchmark.inference INFO: Evaluating bbox proposals
2020-12-07 16:41:14,646 maskrcnn_benchmark.inference INFO: box sizes: all
2020-12-07 16:41:14,647 maskrcnn_benchmark.inference INFO: {'ar': tensor(0.), 'recalls': tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), 'thresholds': tensor([0.5000, 0.5500, 0.6000, 0.6500, 0.7000, 0.7500, 0.8000, 0.8500, 0.9000,
        0.9500]), 'gt_overlaps': tensor([1.1137e-02, 5.3020e-02, 0.0000e+00, 0.0000e+00, 1.5823e-01, 3.2663e-03,
        0.0000e+00, 2.9796e-02, 0.0000e+00, 3.4120e-02, 2.0769e-03, 0.0000e+00,
        0.0000e+00, 1.0011e-03, 2.1189e-03, 0.0000e+00, 1.9208e-02, 1.6659e-01,
        2.9796e-02, 1.1553e-01, 1.5569e-01, 5.4362e-02, 0.0000e+00, 5.3799e-02,
        3.2633e-03, 0.0000e+00, 2.2226e-01, 1.5196e-01, 1.7940e-05, 1.9316e-02,
        0.0000e+00, 0.0000e+00, 3.2783e-03, 2.9796e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.5144e-01, 1.3510e-01,
        0.0000e+00, 0.0000e+00, 4.9882e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.5374e-01,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 1.4119e-03, 6.0942e-02, 0.0000e+00,
        1.2024e-02, 0.0000e+00, 0.0000e+00, 8.1129e-02, 0.0000e+00, 1.1990e-01,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.1055e-03, 0.0000e+00, 2.8956e-02, 8.2153e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.9187e-01, 0.0000e+00,
        8.4914e-02, 1.7906e-01, 0.0000e+00, 1.3386e-01, 0.0000e+00, 0.0000e+00,
        7.9424e-02, 6.3432e-03, 0.0000e+00, 8.9497e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 8.9018e-03, 0.0000e+00, 4.4474e-02, 6.4844e-02, 5.8191e-02,
        0.0000e+00, 1.1868e-01, 1.8186e-01, 3.7676e-02, 2.8874e-02, 1.0526e-01,
        1.1485e-01, 1.5924e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.1440e-01, 1.6959e-02, 0.0000e+00, 0.0000e+00, 2.1821e-01,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0383e-01, 1.5842e-01, 1.4444e-01,
        0.0000e+00, 0.0000e+00, 1.1186e-01, 1.6326e-03, 0.0000e+00, 3.7080e-03,
        0.0000e+00, 5.2097e-02, 1.5307e-01, 0.0000e+00, 0.0000e+00, 1.2240e-02,
        4.8217e-02, 0.0000e+00, 2.0393e-03, 6.7542e-02, 1.2090e-01, 0.0000e+00,
        7.0218e-02, 1.5561e-01, 5.1102e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.1231e-01, 0.0000e+00, 8.0697e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.8082e-01, 1.4761e-05, 1.1904e-03, 4.2981e-02, 0.0000e+00,
        0.0000e+00, 7.4007e-02, 0.0000e+00, 1.4954e-01, 0.0000e+00, 0.0000e+00,
        8.8839e-02, 1.1331e-02, 1.0376e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.3810e-02, 1.2731e-01, 9.3238e-02, 2.1632e-03,
        0.0000e+00, 0.0000e+00, 1.1354e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.6114e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.5426e-03, 1.0294e-01,
        0.0000e+00, 0.0000e+00, 4.1731e-02, 2.2718e-02, 0.0000e+00, 0.0000e+00,
        2.1028e-04, 0.0000e+00, 0.0000e+00, 1.0013e-03, 1.5729e-03, 2.9540e-06,
        0.0000e+00, 6.9867e-02, 1.9715e-03, 9.8914e-03, 0.0000e+00, 0.0000e+00,
        1.4734e-01, 1.2125e-01, 1.5440e-01, 1.7746e-01, 0.0000e+00, 1.7460e-02,
        0.0000e+00, 0.0000e+00, 1.8068e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.8704e-01, 0.0000e+00, 0.0000e+00, 2.9796e-02, 0.0000e+00,
        7.6463e-02, 4.9737e-02, 4.3796e-02, 3.8394e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 7.0697e-02, 1.1868e-01, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 4.2738e-01, 2.9317e-02, 3.2087e-01, 7.3854e-02, 0.0000e+00,
        2.5109e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        8.6403e-02, 0.0000e+00, 0.0000e+00, 6.4935e-02, 0.0000e+00, 1.2125e-01,
        1.7361e-01, 2.2218e-01, 0.0000e+00, 5.8034e-02, 0.0000e+00, 2.9746e-01,
        0.0000e+00, 1.5111e-01, 1.1485e-01, 0.0000e+00, 2.4888e-02, 1.8885e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.9681e-02, 1.3801e-03, 0.0000e+00, 1.0662e-01, 3.2099e-03,
        0.0000e+00, 2.5582e-03, 2.3887e-02, 0.0000e+00, 0.0000e+00, 5.1076e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.1765e-03, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 2.0596e-01, 7.8852e-02, 6.3591e-02, 2.9796e-02,
        0.0000e+00, 6.2580e-02, 1.1033e-01, 1.2412e-01, 0.0000e+00, 2.6037e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 3.6720e-02, 4.6070e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 1.0150e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 3.9119e-03, 4.9603e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 8.6531e-02, 0.0000e+00, 0.0000e+00, 4.4790e-02, 9.0022e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.2068e-01, 1.7933e-02, 5.1864e-02, 6.9717e-03, 0.0000e+00, 1.5729e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 1.3572e-01, 0.0000e+00, 1.7219e-02,
        0.0000e+00, 0.0000e+00, 1.5453e-01, 1.9148e-02, 8.2023e-03, 0.0000e+00,
        3.0878e-03, 0.0000e+00, 0.0000e+00, 2.8344e-02, 8.6600e-02, 2.8529e-02,
        0.0000e+00, 8.2867e-03, 2.6427e-03, 8.5079e-02, 0.0000e+00, 0.0000e+00,
        4.9196e-02, 0.0000e+00, 1.0851e-02, 1.3035e-01, 0.0000e+00, 1.0729e-01,
        0.0000e+00, 0.0000e+00, 2.8179e-01, 0.0000e+00, 1.9826e-01, 0.0000e+00,
        0.0000e+00, 1.7577e-01, 0.0000e+00, 1.5100e-01, 4.3081e-02, 1.1016e-01,
        0.0000e+00, 1.6410e-04, 0.0000e+00, 0.0000e+00, 1.7982e-02, 5.9257e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        6.2875e-02, 0.0000e+00, 2.0117e-01, 0.0000e+00, 8.1547e-02, 3.3239e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 3.4581e-02, 3.0038e-01, 0.0000e+00,
        0.0000e+00, 1.3629e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        2.0659e-03, 0.0000e+00, 8.8957e-03, 7.7207e-02, 1.5729e-03, 4.0228e-03,
        0.0000e+00, 1.6913e-01, 0.0000e+00, 0.0000e+00, 2.9644e-01, 1.4610e-02,
        1.0958e-01, 1.1327e-03, 0.0000e+00, 1.1298e-01, 2.4452e-01, 0.0000e+00,
        0.0000e+00, 2.1404e-01, 0.0000e+00, 1.2755e-01, 0.0000e+00, 1.3163e-01,
        0.0000e+00, 1.0957e-01, 3.0350e-03, 2.9796e-02, 3.7720e-03, 1.9246e-02,
        2.2672e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.3090e-01, 0.0000e+00,
        0.0000e+00, 1.1485e-01, 1.1698e-01, 0.0000e+00, 0.0000e+00, 1.3476e-03,
        1.3119e-01, 0.0000e+00, 0.0000e+00, 2.7876e-02, 0.0000e+00, 5.9886e-02,
        1.4848e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.7354e-02,
        0.0000e+00, 5.5342e-06, 1.9103e-03, 0.0000e+00, 0.0000e+00, 1.7093e-01,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 1.1701e-01, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.5729e-03, 1.6404e-02, 3.8093e-03, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 1.1485e-01, 2.9085e-02, 1.5098e-03, 6.7960e-02, 0.0000e+00,
        1.2790e-02, 3.4580e-02, 5.3190e-02, 2.9796e-02, 0.0000e+00, 2.9796e-02,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 3.8544e-03, 0.0000e+00, 0.0000e+00,
        1.1096e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.1632e-01,
        6.3833e-02, 2.5949e-02, 0.0000e+00, 2.0833e-03, 0.0000e+00, 9.0367e-02,
        0.0000e+00, 8.8216e-02, 0.0000e+00, 2.3416e-01, 0.0000e+00, 0.0000e+00,
        7.8423e-04, 3.1696e-02, 4.5946e-01, 0.0000e+00, 2.6114e-02, 1.3640e-02,
        7.3273e-02, 0.0000e+00, 0.0000e+00, 2.6541e-03, 0.0000e+00, 6.7906e-02,
        8.5707e-06, 0.0000e+00, 0.0000e+00, 0.0000e+00, 7.5819e-04, 1.7763e-01,
        2.9478e-02, 1.7192e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.9968e-03,
        0.0000e+00, 1.1612e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        7.7780e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.8035e-01, 1.3195e-02,
        1.2540e-03, 2.9796e-02, 3.8320e-03, 9.6724e-02, 0.0000e+00, 0.0000e+00,
        2.2164e-01, 0.0000e+00, 0.0000e+00, 1.5175e-01, 0.0000e+00, 0.0000e+00,
        1.4054e-01, 6.9120e-02, 6.0854e-02, 1.7275e-01, 0.0000e+00, 0.0000e+00,
        1.1299e-01, 1.1110e-01, 0.0000e+00, 4.9254e-02, 1.5683e-01, 0.0000e+00,
        8.1264e-02, 3.5959e-02, 1.0097e-01, 5.4515e-02, 5.2909e-03, 0.0000e+00,
        0.0000e+00, 6.6463e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.2310e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 8.2023e-03, 0.0000e+00, 0.0000e+00, 2.1628e-02,
        5.8765e-02, 2.9796e-02, 0.0000e+00, 1.5965e-01, 2.6457e-02, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 4.7475e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 6.6282e-02, 0.0000e+00, 0.0000e+00,
        2.1821e-01, 7.5112e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.7876e-02,
        0.0000e+00, 0.0000e+00, 3.4272e-02, 0.0000e+00, 0.0000e+00, 1.8848e-02,
        0.0000e+00, 0.0000e+00, 3.9119e-03, 1.4125e-02, 0.0000e+00, 1.1593e-05,
        2.2916e-03, 1.7964e-03, 0.0000e+00, 0.0000e+00, 9.5467e-03, 0.0000e+00,
        1.1173e-01, 1.8453e-01, 0.0000e+00, 1.3096e-03, 3.9542e-02, 5.4942e-02,
        2.9796e-02, 0.0000e+00, 2.0393e-03, 1.3875e-02, 2.3467e-02, 2.2280e-02,
        2.0275e-01, 0.0000e+00, 1.5225e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 7.1577e-02, 1.3193e-02, 0.0000e+00, 4.1659e-02, 2.9796e-02,
        0.0000e+00, 4.9603e-02, 9.7298e-02, 0.0000e+00, 2.4992e-03, 0.0000e+00,
        3.2806e-02, 0.0000e+00, 0.0000e+00, 9.8310e-02, 7.9552e-05, 0.0000e+00,
        1.4078e-01, 4.3165e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.0880e-01,
        0.0000e+00, 7.8568e-02, 1.8929e-03, 1.0162e-01, 0.0000e+00, 5.4896e-02,
        0.0000e+00, 2.9796e-02, 1.4824e-01, 0.0000e+00, 1.5192e-05, 1.0034e-03,
        7.1529e-03, 0.0000e+00, 1.7578e-01, 3.2290e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 7.1302e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00]), 'gt_labels': tensor([1, 1, 2, 8, 2, 1, 1, 1, 1, 8, 1, 1, 1, 8, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
        1, 1, 8, 2, 1, 1, 1, 1, 1, 1, 1, 8, 2, 2, 2, 3, 1, 1, 1, 8, 1, 1, 1, 1,
        1, 1, 2, 2, 1, 8, 3, 3, 3, 8, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 8, 2,
        2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 8, 2, 1, 8, 8, 1, 1, 1, 1, 2, 1, 1, 2, 2,
        8, 2, 2, 2, 1, 1, 1, 8, 1, 1, 1, 1, 3, 2, 1, 8, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 2, 2, 2, 8, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 8, 1, 1, 2, 2,
        1, 3, 3, 3, 3, 3, 8, 1, 1, 2, 1, 1, 1, 8, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1,
        3, 3, 3, 3, 3, 3, 8, 1, 2, 8, 2, 1, 8, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
        1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 8, 1, 1, 8, 2, 1, 8, 1, 1,
        2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1,
        1, 1, 1, 8, 2, 2, 2, 1, 1, 1, 1, 1, 8, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 8,
        2, 3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 1, 1, 1, 8, 2,
        2, 1, 1, 1, 1, 2, 8, 3, 1, 1, 1, 8, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3,
        3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 8,
        3, 3, 3, 1, 2, 1, 1, 8, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3,
        1, 2, 8, 1, 2, 1, 2, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 8, 1, 2, 1,
        3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 8, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3,
        1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 8, 1, 1, 1, 3, 8, 1, 1, 1, 1, 1,
        1, 2, 8, 1, 1, 8, 1, 3, 1, 1, 1, 1, 8, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 8,
        1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
        1, 8, 8, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 8, 2, 1, 3, 1, 1, 2, 2, 1, 1, 1,
        1, 1, 2, 2, 1, 2, 2, 1, 8, 1, 1, 1, 8, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 1, 1, 2, 2, 8, 8, 1, 1, 1, 1, 1, 1, 2, 8, 1, 8, 1, 1, 1, 2, 2,
        2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 8, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 8, 2, 1, 1, 1, 1, 3, 3, 3,
        3, 3, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 8, 1, 1, 8, 1, 1, 2, 1, 1, 1, 1,
        1, 8, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2,
        3, 3, 3, 3, 3, 1, 8, 1, 2, 1, 2, 1, 1, 1, 3, 1, 2, 2, 1, 1, 2, 1, 1, 1,
        2, 2, 3, 3, 3, 3, 8]), 'best match labels': tensor([ 8.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,  6.,  8.,  8.,  6.,  8.,  8.,
         8.,  8.,  5.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,
         5.,  8.,  3.,  8.,  8.,  8.,  8.,  6.,  8.,  8.,  8.,  3.,  8.,  8.,
         8.,  8.,  8., -1., -1.,  8.,  3.,  8.,  3.,  6.,  8.,  8., -1.,  3.,
         6.,  8.,  8.,  8.,  8.,  8.,  8.,  8., -1.,  8., -1.,  2.,  8.,  8.,
         3., -1.,  6.,  8.,  8.,  8.,  8.,  8.,  3.,  8., -1.,  8.,  8.,  8.,
         8.,  8.,  8.,  8., -1.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  3.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,
         5., -1.,  2.,  8.,  8.,  6.,  3.,  8.,  3.,  6.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  5.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  6.,  2.,  3.,  8.,  2.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  3.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  2.,  8.,  2.,  2.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,
        -1., -1., -1., -1., -1., -1., -1.,  8.,  6.,  8., -1.,  8.,  3.,  8.,
         8.,  8.,  6.,  8.,  8., -1.,  3.,  8.,  3.,  3.,  8.,  8.,  8.,  8.,
         2.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8., -1.,  8.,
         8.,  8.,  8.,  3.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,
         8., -1.,  6.,  8.,  8.,  8., -1.,  2.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  6.,  8.,  8., -1.,  2.,  8.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8., -1., -1., -1.,  3.,  8.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,  5.,  8.,
         8.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,
         8.,  8.,  3., -1.,  8., -1.,  3.,  8.,  8.,  6.,  3.,  6.,  8.,  8.,
         8.,  8.,  8.,  8.,  8.,  5.,  8.,  8.,  8.,  8., -1.,  8., -1., -1.,
        -1., -1.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3., -1.,  8., -1.,  8.,
         8.,  8.,  6.,  8.,  3.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,
        -1.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,
        -1.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8., -1., -1., -1., -1., -1.,  5.,  8.,  8.,  8.,  3.,  8.,  8.,
         8.,  8.,  8.,  3.,  8.,  8.,  8.,  5.,  8.,  3.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  6.,  8.,  8.,  8.,  8., -1.,  6.,  8.,  8.,  8.,
         5.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8., -1.,  3.,  8.,  8.,  3.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  6.,
         3.,  8.,  8.,  8.,  8., -1.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  3.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  3.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  6.,  8.,
         8.,  6.,  5.,  3.,  8.,  8.,  8.,  8.,  8.,  3.,  3.,  8.,  8.,  8.,
         8.,  3.,  8.,  8.,  8.,  8.,  3.,  3.,  6.,  6.,  8., -1.,  8.,  8.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  8.,  6.,  8.,  6.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,
         8.,  8.,  6.,  8.,  8.,  5.,  8.,  8.,  8.,  3.,  8., -1., -1., -1.,
        -1., -1., -1., -1., -1., -1.,  3.,  8., -1.,  8., -1.,  6.,  8.,  8.,
         2.,  8.,  8.,  8.,  8.,  2.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  3.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8., -1.,  3.,  3.,  8.,  8.,  8.,
         8.,  3.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  8.,  8.,
         8.,  8.,  8.,  8.,  6.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         8.,  6.,  8.,  8., -1.,  8.,  8.,  8.,  8.,  3.,  8.,  8.,  2.,  8.,
         8.,  8.,  3.,  8.,  8.,  3.,  8.,  8.,  3.,  8.,  3.,  8.,  8.,  5.,
         8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,  8.,
         6.,  8.,  8.,  8.,  8.,  5.,  8.,  8.,  8., -1., -1., -1.,  8.]), 'best match scores': tensor([1.0000, 1.0000, 0.9885, 0.7680, 0.9999, 0.5223, 0.9197, 1.0000, 1.0000,
        1.0000, 0.9989, 1.0000, 0.9012, 1.0000, 0.1843, 1.0000, 1.0000, 0.0722,
        1.0000, 0.9999, 1.0000, 1.0000, 0.3891, 0.6044, 1.0000, 0.9996, 0.9561,
        0.1228, 1.0000, 1.0000, 0.9590, 0.1642, 1.0000, 1.0000, 0.6168, 1.0000,
        0.9959, 0.9997, 1.0000, 0.1392, 1.0000, 0.0595, 1.0000, 0.9994, 1.0000,
        0.0000, 0.0000, 1.0000, 0.9942, 1.0000, 0.9753, 0.3837, 1.0000, 0.9764,
        0.0000, 0.2210, 0.9997, 0.9758, 0.6893, 0.5286, 0.9987, 0.2339, 1.0000,
        1.0000, 0.0000, 0.9981, 0.0000, 1.0000, 0.7356, 1.0000, 1.0000, 0.0000,
        0.9754, 0.0557, 0.9200, 0.9967, 1.0000, 1.0000, 0.5652, 0.9970, 0.0000,
        1.0000, 0.2124, 0.5327, 0.9304, 0.4722, 0.9996, 1.0000, 0.0000, 0.8608,
        1.0000, 1.0000, 1.0000, 1.0000, 0.9954, 0.9982, 0.9774, 0.7029, 0.9973,
        0.9999, 0.9963, 0.4381, 0.9985, 0.9611, 0.7100, 0.1565, 0.9987, 0.9990,
        0.9854, 0.9999, 0.5764, 0.4980, 1.0000, 0.0000, 0.8812, 0.0532, 1.0000,
        1.0000, 0.1168, 0.9984, 0.8983, 1.0000, 1.0000, 1.0000, 0.0986, 0.5553,
        0.6656, 1.0000, 0.9497, 0.3292, 1.0000, 0.9999, 1.0000, 0.9297, 0.9994,
        1.0000, 0.1521, 0.8311, 1.0000, 0.5772, 1.0000, 1.0000, 0.9955, 1.0000,
        1.0000, 0.2881, 1.0000, 0.9914, 1.0000, 0.9527, 0.8953, 0.9688, 0.9999,
        1.0000, 1.0000, 0.1863, 0.9976, 1.0000, 1.0000, 0.6865, 1.0000, 0.8621,
        0.1364, 1.0000, 1.0000, 0.9969, 1.0000, 1.0000, 1.0000, 0.9838, 1.0000,
        0.9229, 0.9999, 0.9778, 0.2374, 1.0000, 0.9931, 0.5109, 1.0000, 0.9990,
        0.8252, 0.0524, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0759, 0.1316, 1.0000, 0.0000, 0.7510, 1.0000, 0.9959, 0.9984, 0.9876,
        0.9932, 1.0000, 1.0000, 0.0000, 0.0734, 1.0000, 1.0000, 0.8416, 0.0724,
        1.0000, 1.0000, 0.9956, 1.0000, 0.9483, 0.9283, 1.0000, 0.6837, 0.9977,
        1.0000, 0.1305, 0.9990, 0.0597, 0.2506, 1.0000, 0.0000, 1.0000, 1.0000,
        1.0000, 1.0000, 1.0000, 1.0000, 0.4870, 1.0000, 1.0000, 1.0000, 0.9780,
        0.2061, 1.0000, 0.9999, 1.0000, 0.9549, 0.0000, 0.9999, 0.9996, 1.0000,
        0.5819, 0.0000, 0.2011, 1.0000, 1.0000, 0.9858, 1.0000, 0.0949, 0.8598,
        1.0000, 1.0000, 1.0000, 1.0000, 0.0000, 0.8114, 1.0000, 1.0000, 0.0769,
        1.0000, 0.6255, 1.0000, 0.9773, 0.9999, 1.0000, 0.9802, 0.9958, 0.9675,
        1.0000, 0.9999, 0.9998, 0.1799, 1.0000, 0.0000, 0.0000, 0.0000, 0.9675,
        0.0752, 0.9849, 1.0000, 0.9362, 0.4031, 0.9976, 1.0000, 0.2924, 0.0628,
        1.0000, 0.9956, 0.2498, 1.0000, 1.0000, 0.0650, 1.0000, 0.6290, 1.0000,
        0.8245, 0.3423, 0.8226, 1.0000, 0.6401, 1.0000, 0.9991, 0.9996, 0.6385,
        0.9996, 1.0000, 0.9172, 0.9998, 0.6538, 0.0000, 0.9872, 0.0000, 0.0526,
        1.0000, 1.0000, 1.0000, 0.9998, 1.0000, 0.9803, 1.0000, 0.9997, 0.9999,
        0.9111, 0.9996, 0.9984, 1.0000, 0.1139, 0.9958, 0.4125, 1.0000, 0.0000,
        0.0919, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.9887, 1.0000, 1.0000,
        1.0000, 0.1441, 0.0609, 1.0000, 0.9988, 1.0000, 1.0000, 1.0000, 0.9963,
        0.8537, 0.0541, 0.9248, 1.0000, 0.9586, 1.0000, 0.1087, 0.0605, 0.9098,
        0.0000, 0.0986, 0.0000, 0.0825, 0.9956, 0.9999, 1.0000, 1.0000, 1.0000,
        1.0000, 0.2112, 0.9914, 0.9942, 0.9889, 0.1145, 1.0000, 1.0000, 1.0000,
        0.0000, 0.9849, 1.0000, 1.0000, 0.8272, 0.8096, 1.0000, 1.0000, 0.9999,
        0.9915, 0.3356, 0.0532, 0.0752, 0.9881, 0.0000, 0.7964, 0.9909, 0.9146,
        1.0000, 0.8713, 0.1014, 0.9956, 0.9669, 1.0000, 0.7355, 1.0000, 1.0000,
        1.0000, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000,
        0.9996, 0.9997, 0.2092, 1.0000, 0.9994, 0.9985, 1.0000, 1.0000, 1.0000,
        0.2095, 0.9998, 0.8967, 1.0000, 0.9993, 0.9995, 0.0857, 0.2474, 0.1370,
        1.0000, 0.9315, 1.0000, 0.0522, 1.0000, 0.3891, 1.0000, 1.0000, 0.2937,
        0.9992, 0.9990, 0.0000, 0.9985, 1.0000, 0.3857, 0.9906, 0.9997, 0.7077,
        1.0000, 0.8550, 0.0748, 1.0000, 0.9991, 1.0000, 0.9998, 0.9997, 0.9991,
        0.9998, 0.9999, 0.0987, 0.3009, 0.9973, 0.9046, 1.0000, 0.6689, 0.9991,
        1.0000, 0.8112, 1.0000, 0.9943, 0.8754, 0.0655, 0.4560, 0.8257, 1.0000,
        0.0000, 1.0000, 0.8383, 1.0000, 0.9988, 0.1225, 0.9984, 1.0000, 1.0000,
        1.0000, 0.0923, 1.0000, 0.7886, 1.0000, 1.0000, 1.0000, 1.0000, 0.9604,
        0.0000, 0.9978, 0.9846, 0.9703, 1.0000, 0.9979, 1.0000, 0.5711, 0.9974,
        0.1857, 1.0000, 0.9879, 1.0000, 0.8297, 0.9754, 0.6183, 1.0000, 0.8063,
        0.9997, 1.0000, 1.0000, 0.5015, 0.1156, 1.0000, 1.0000, 1.0000, 0.6327,
        0.9968, 1.0000, 1.0000, 0.9972, 1.0000, 1.0000, 0.0940, 0.9685, 0.0660,
        1.0000, 1.0000, 0.0826, 1.0000, 0.1752, 1.0000, 0.2750, 0.8996, 0.1683,
        1.0000, 1.0000, 1.0000, 1.0000, 0.0956, 1.0000, 0.2554, 1.0000, 0.9039,
        0.9949, 0.6950, 0.9741, 0.2203, 0.9998, 1.0000, 0.8541, 1.0000, 0.0000,
        0.9999, 0.9997, 1.0000, 1.0000, 1.0000, 1.0000, 0.9964, 0.9911, 1.0000,
        0.9604, 0.9997, 0.9998, 1.0000, 1.0000, 0.9962, 1.0000, 1.0000, 0.1039,
        1.0000, 0.1326, 1.0000, 1.0000, 1.0000, 0.9911, 0.5429, 0.7363, 1.0000,
        0.9844, 0.2734, 0.9828, 0.9993, 1.0000, 0.9362, 0.0581, 0.3024, 1.0000,
        1.0000, 0.9930, 0.0570, 0.5873, 0.0595, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9841, 1.0000, 0.0000, 0.5423,
        0.0000, 1.0000, 0.9994, 0.9997, 0.9997, 1.0000, 0.9996, 1.0000, 1.0000,
        0.9972, 0.0698, 1.0000, 0.4372, 1.0000, 1.0000, 1.0000, 0.1080, 0.8334,
        1.0000, 1.0000, 0.9947, 0.9999, 0.9573, 0.9994, 0.9999, 0.0519, 0.0000,
        0.9690, 1.0000, 1.0000, 1.0000, 0.9701, 0.5185, 1.0000, 1.0000, 0.9902,
        0.1086, 0.1648, 0.0677, 1.0000, 1.0000, 1.0000, 0.9889, 1.0000, 1.0000,
        0.0866, 1.0000, 0.9998, 1.0000, 1.0000, 1.0000, 0.7645, 0.0883, 0.0573,
        1.0000, 1.0000, 0.9775, 0.9377, 0.9947, 1.0000, 1.0000, 1.0000, 0.9998,
        0.8373, 0.0000, 0.4963, 0.9459, 0.9941, 1.0000, 0.4947, 1.0000, 1.0000,
        1.0000, 1.0000, 0.6745, 0.0524, 0.3186, 1.0000, 0.9986, 0.8995, 0.7978,
        1.0000, 1.0000, 0.9702, 0.2358, 0.6832, 1.0000, 0.9709, 0.9368, 0.8444,
        0.9991, 1.0000, 0.9989, 0.0926, 0.9987, 0.0524, 0.8669, 0.1211, 0.5174,
        0.9963, 0.9997, 0.9997, 1.0000, 0.0688, 0.8164, 0.6247, 0.9960, 0.9999,
        0.4026, 1.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.5264]), 'num_pos': 727}
